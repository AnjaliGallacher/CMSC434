<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>User Profile - iPad View</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="shared-styles.css" />
		<style>

			.header {
				background-color: var(--background-color); /* Match app background */
				border-bottom: 1px solid var(--border-color); /* Add border back for separation */
			}

			.profile-section {
				display: flex;
				align-items: center;
				padding-bottom: 30px;
				margin-bottom: 30px;
				border-bottom: 1px solid var(--border-color);
				gap: 25px;
			}
			.profile-picture-container {
				position: relative;
			}
			.profile-picture {
				width: 100px;
				height: 100px;
				border-radius: 50%;
				background-color: var(--surface-secondary-color);
				position: relative;
				box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
				display: flex;
				justify-content: center;
				align-items: center;
				flex-shrink: 0;
				color: var(--primary-color);
				cursor: pointer;
				transition: transform 0.2s ease;
				overflow: hidden;
				border: 2px solid var(--surface-color);
			}
			.profile-picture img {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
			.profile-picture-placeholder {
				font-size: 50px;
				opacity: 0.9;
			}
			.profile-picture:hover {
				transform: scale(1.05);
			}
			.profile-picture-edit-icon {
				content: "‚úèÔ∏è";
				position: absolute;
				bottom: 5px;
				right: 5px;
				font-size: 18px;
				background-color: var(--surface-color);
				color: var(--text-primary);
				border-radius: 50%;
				padding: 5px;
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
				opacity: 0;
				transition: opacity 0.2s ease;
				pointer-events: none;
			}
			.profile-picture:hover .profile-picture-edit-icon {
				opacity: 1;
			}

			.profile-info {
				flex-grow: 1;
				text-align: left;
			}
			.username {
				font-size: 24px;
				font-weight: 600;
				color: var(--text-primary);
				margin: 0 0 6px 0;
			}
			.user-details {
				font-size: 15px;
				color: var(--text-secondary);
				line-height: 1.5;
				margin: 0 0 10px 0;
			}
			.user-bio {
				font-size: 16px;
				color: var(--text-secondary);
				line-height: 1.5;
				margin: 0;
				max-width: 450px;
			}
			.edit-profile-btn {
				/* Use button classes */
				margin-top: 15px;
			}

			.stats-section,
			.goals-section,
			.achievements-section,
			.settings-section {
				margin-bottom: 35px;
			}
			.section-header {
				font-size: 18px;
				font-weight: 600;
				color: var(--text-primary);
				margin-bottom: 20px;
				padding-bottom: 10px;
				border-bottom: 1px solid var(--surface-secondary-color);
				display: flex;
				justify-content: space-between;
				align-items: center;
			}
			.profile-stats-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
				gap: 18px;
			}
			.profile-stat-box {
				background-color: var(--surface-color);
				border-radius: var(--card-border-radius);
				padding: 18px;
				box-shadow: 0 4px 12px var(--shadow-color);
				transition: transform 0.2s ease, box-shadow 0.2s ease;
				display: flex;
				flex-direction: column;
				min-height: 130px;
				border: 1px solid var(--border-color); /* Use theme border */
			}
			/* Removed light mode specific border */

			.profile-stat-box.clickable:hover {
				transform: translateY(-3px);
				box-shadow: 0 6px 16px var(--shadow-strong-color);
				cursor: pointer;
			}
			.profile-stat-header {
				display: flex;
				align-items: center;
				font-size: 13px;
				font-weight: 500;
				color: var(--text-secondary);
				margin-bottom: 10px;
			}
			.profile-stat-icon {
				font-size: 18px;
				margin-right: 8px;
                 /* Color is now set inline based on variable */
			}
			.profile-stat-value {
				font-size: 22px;
				font-weight: 600;
				color: var(--text-primary);
				line-height: 1.2;
				margin-top: auto;
				padding-top: 5px;
			}
			.profile-stat-unit {
				font-size: 13px;
				color: var(--text-secondary);
				margin-left: 4px;
			}
			.profile-stat-label {
				font-size: 12px;
				color: var(--text-tertiary);
				margin-top: 3px;
			}

			/* Goals List */
			.goal-list {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.goal-item {
				background-color: var(--surface-color);
				border-radius: 12px;
				padding: 15px;
				margin-bottom: 12px;
				display: flex;
				justify-content: space-between;
				align-items: center;
				box-shadow: 0 2px 5px var(--shadow-color);
				border: 1px solid var(--border-color);
			}
			.goal-info {
				flex-grow: 1;
				margin-right: 15px;
			}
			.goal-name {
				font-weight: 600;
				font-size: 16px;
				margin-bottom: 5px;
			}
			.goal-details {
				font-size: 13px;
				color: var(--text-secondary);
			}
			.goal-progress {
				font-weight: 500;
				color: var(--accent-green);
			}
			.goal-actions button { /* Style action icons */
                background: none;
                border: none;
                cursor: pointer;
                padding: 5px;
                opacity: 0.7;
                transition: opacity 0.2s ease;
				font-size: 18px;
				margin-left: 5px;
			}
            .goal-actions button:hover {
                opacity: 1;
            }

			/* Achievements Grid */
			.achievements-grid {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
				gap: 20px;
				text-align: center;
			}
			.achievement-badge {
				display: flex;
				flex-direction: column;
				align-items: center;
				cursor: pointer;
				transition: transform 0.2s ease;
			}
			.achievement-badge:hover {
				transform: scale(1.05);
			}
			.achievement-badge-icon {
				font-size: 40px;
				margin-bottom: 8px;
                /* Color set inline from JS */
			}
			.achievement-badge-name {
				font-size: 12px;
				color: var(--text-secondary);
				font-weight: 500;
			}

			/* Settings List */
			.settings-list {
				list-style: none;
				padding: 0;
				margin: 0;
                background-color: var(--surface-color); /* Group settings in a card-like bg */
                border-radius: var(--card-border-radius);
                border: 1px solid var(--border-color);
                box-shadow: 0 4px 12px var(--shadow-color);
                overflow: hidden; /* Ensures border radius applies to items */
			}
			.settings-item {
				/* background-color: var(--surface-color); Removed, use list bg */
				/* border-radius: 12px; Removed */
				padding: 15px var(--content-padding);
				/* margin-bottom: 10px; Removed, use border */
				display: flex;
				justify-content: space-between;
				align-items: center;
				cursor: pointer;
				transition: background-color 0.2s ease;
				/* border: 1px solid var(--border-color); Removed */
                border-bottom: 1px solid var(--border-color); /* Separator */
			}
            .settings-item:last-child {
                 border-bottom: none; /* No border for last item */
            }
			.settings-item:hover {
				background-color: var(--surface-secondary-color);
			}
			.settings-item-label {
				font-weight: 500;
			}
			.settings-item-control {
				color: var(--text-secondary);
			}
            /* Chevron for navigation items */
            .settings-item.navigable .settings-item-control {
                font-weight: bold;
                font-size: 18px;
                color: var(--text-tertiary);
            }
			.toggle-switch {
				width: 50px;
				height: 28px;
				background-color: var(--surface-secondary-color);
				border-radius: 14px;
				position: relative;
				cursor: pointer;
                border: 1px solid var(--border-color);
			}
			.toggle-switch::before {
				content: "";
				position: absolute;
				width: 24px;
				height: 24px;
				background-color: white;
				border-radius: 50%;
				top: 1px; /* Adjusted for border */
				left: 1px; /* Adjusted for border */
				transition: transform 0.2s ease;
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
			}
			.toggle-switch.active {
				background-color: var(--accent-green); /* Use green for active toggle */
                border-color: var(--accent-green);
			}
			.toggle-switch.active::before {
				transform: translateX(22px);
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<!-- Header -->
			<div class="header">
				<div class="header-spacer"></div>
				<span class="header-title">Profile</span>
				<div class="header-actions">
                    <!-- Settings icon moved to settings section header -->
				</div>
			</div>

			<!-- Main Scrollable Content Area -->
			<div class="main-content">
				<!-- Profile Section -->
				<section class="profile-section">
					<div class="profile-picture-container">
						<div
							class="profile-picture"
							title="Change Profile Picture"
							onclick="changePicture()"
						>
							<img
								id="profilePicImage"
								src=""
								alt="User"
								style="display: none"
							/>
							<!-- Image holder -->
							<span
								id="profilePicPlaceholder"
								class="profile-picture-placeholder"
								>üë§</span
							>
							<!-- Placeholder icon -->
						</div>
						<span class="profile-picture-edit-icon">‚úèÔ∏è</span>
					</div>
					<div class="profile-info">
						<div id="displayUsername" class="username">
							User Name
						</div>
						<p id="displayUserDetails" class="user-details">
							Age: -- | Gender: -- | Height: -- cm | Weight: -- kg
						</p>
						<p id="displayUserBio" class="user-bio">
							Edit your profile to add a bio and update your
							details.
						</p>
						<button
							class="button button-secondary edit-profile-btn"
							onclick="openEditProfileModal()"
						>
							Edit Profile
						</button>
					</div>
				</section>

				<!-- Stats Section -->
				<section class="stats-section">
					<h2 class="section-header">Activity Summary</h2>
					<div class="profile-stats-grid">
						<!-- Stats - Make them clickable to go to progress page -->
						<div
							class="profile-stat-box clickable"
							onclick="navigateTo('progress.shtml#activity')"
						>
							<div class="profile-stat-header">
								<span
									class="profile-stat-icon"
									style="color: var(--accent-teal)" /* Teal */
									>üë£</span
								>
								Daily Steps Avg
							</div>
							<div class="profile-stat-value" id="statAvgSteps">
								--
							</div>
							<div class="profile-stat-label">Last 30d</div>
						</div>
						<div
							class="profile-stat-box clickable"
							onclick="navigateTo('progress.shtml#activity')"
						>
							<div class="profile-stat-header">
								<span
									class="profile-stat-icon"
									style="color: var(--primary-color)" /* Blue */
									>üèÉ</span
								>
								Weekly Run Distance
							</div>
							<div class="profile-stat-value" id="statWeeklyRun">
								--<span class="profile-stat-unit">km</span>
							</div>
							<div class="profile-stat-label">This Week</div>
						</div>
						<div
							class="profile-stat-box clickable"
							onclick="navigateTo('progress.shtml#nutrition')"
						>
							<div class="profile-stat-header">
								<span
									class="profile-stat-icon"
									style="color: var(--accent-red)" /* Red */
									>üî•</span
								>
								Avg Calories Burned
							</div>
							<div
								class="profile-stat-value"
								id="statAvgCaloriesBurned"
							>
								--<span class="profile-stat-unit">kcal</span>
							</div>
							<div class="profile-stat-label">
								Active, Daily Avg
							</div>
						</div>
						<div
							class="profile-stat-box clickable"
							onclick="navigateTo('progress.shtml#weight')"
						>
							<div class="profile-stat-header">
								<span
									class="profile-stat-icon"
									style="color: var(--accent-red)" /* Red */
									>‚öñÔ∏è</span
								>
								Weight Trend
							</div>
							<div
								class="profile-stat-value"
								id="statWeightTrend"
							>
								--<span class="profile-stat-unit">kg</span>
							</div>
							<div class="profile-stat-label">Last 30 Days</div>
						</div>
					</div>
				</section>

				<!-- Goals Section -->
				<section id="goals" class="goals-section">
					<h2 class="section-header">
						<span>My Goals</span>
						<button
							class="button button-secondary"
							style="padding: 6px 12px; font-size: 14px"
							onclick="openAddGoalModal()"
						>
							+ Add Goal
						</button>
					</h2>
					<ul class="goal-list" id="goalList">
						<!-- Goals loaded by JS -->
					</ul>
					<p
						id="noGoals"
						class="text-center text-tertiary d-none mt-2"
					>
						No goals set yet. Click '+ Add Goal' to create one!
					</p>
				</section>

				<!-- Achievements Section -->
				<section id="achievements" class="achievements-section">
					<h2 class="section-header">Achievements</h2>
					<div class="achievements-grid" id="achievementsGrid">
						<!-- Badges loaded by JS -->
					</div>
					<p
						id="noAchievementsProfile"
						class="text-center text-tertiary d-none mt-2"
					>
						Keep logging to earn achievements!
					</p>
				</section>

				<!-- Settings Section -->
				<section id="settings" class="settings-section">
					<h2 class="section-header">Settings</h2>
					<ul class="settings-list">
						<li
							class="settings-item"
							onclick="toggleNotifications()"
						>
							<span class="settings-item-label"
								>Daily Summary Notification</span
							>
							<div class="settings-item-control">
								<div
									class="toggle-switch"
									id="notificationToggle"
								></div>
							</div>
						</li>
						<li class="settings-item navigable" onclick="alert('Account Settings not implemented')">
							<span class="settings-item-label"
								>Account Settings</span
							>
							<span class="settings-item-control">‚ùØ</span>
						</li>
						<li class="settings-item navigable" onclick="alert('Connected Apps not implemented')">
							<span class="settings-item-label"
								>Connected Apps</span
							>
							<span class="settings-item-control">‚ùØ</span>
						</li>
						<li class="settings-item navigable" onclick="exportData()">
							<span class="settings-item-label"
								>Export My Data</span
							>
							<span class="settings-item-control">‚ùØ</span>
						</li>
                        <li class="settings-item navigable" onclick="alert('Help & Support not implemented')">
							<span class="settings-item-label"
								>Help & Support</span
							>
							<span class="settings-item-control">‚ùØ</span>
						</li>
						<li class="settings-item" onclick="logout()">
							<span
								class="settings-item-label"
								style="color: var(--accent-red)"
								>Log Out</span
							>
							<span class="settings-item-control"></span>
						</li>
					</ul>
				</section>
			</div>
			<!-- End Main Content -->

			<!-- Edit Profile Modal -->
			<div class="modal-overlay" id="editProfileModal">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Profile</h3>
						<button
							class="modal-close-btn"
							onclick="closeEditProfileModal()"
						>
							√ó
						</button>
					</div>
					<div class="modal-body">
						<form id="edit-profile-form">
							<div class="input-group">
								<label for="editUsername" class="form-label"
									>Username</label
								>
								<input
									type="text"
									id="editUsername"
									name="username"
									class="form-input"
									required
								/>
							</div>
							<div class="input-row">
								<div>
									<label for="editAge" class="form-label"
										>Age</label
									>
									<input
										type="number"
										id="editAge"
										name="age"
										class="form-input"
										min="1"
									/>
								</div>
								<div>
									<label for="editGender" class="form-label"
										>Gender</label
									>
									<select
										id="editGender"
										name="gender"
										class="form-select"
									>
										<option value="">Select...</option>
										<option value="male">Male</option>
										<option value="female">Female</option>
										<option value="other">Other</option>
										<option value="prefer_not_say">
											Prefer not to say
										</option>
									</select>
								</div>
							</div>
							<div class="input-row">
								<div>
									<label for="editHeight" class="form-label"
										>Height (cm)</label
									>
									<input
										type="number"
										id="editHeight"
										name="height_cm"
										class="form-input"
										min="50"
									/>
								</div>
								<div>
									<label for="editWeight" class="form-label"
										>Current Weight (kg)</label
									>
									<input
										type="number"
										id="editWeight"
										name="weight_kg"
										class="form-input"
										min="1"
										step="0.1"
									/>
								</div>
							</div>
							<div class="input-group">
								<label for="editBio" class="form-label"
									>Bio</label
								>
								<textarea
									id="editBio"
									name="bio"
									class="form-textarea"
									rows="3"
									placeholder="Tell us a bit about yourself..."
								></textarea>
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button
							type="button"
							class="button button-secondary"
							onclick="closeEditProfileModal()"
						>
							Cancel
						</button>
						<button
							type="button"
							class="button button-primary"
							onclick="saveProfile()"
						>
							Save Changes
						</button>
					</div>
				</div>
			</div>

			<!-- Add Goal Modal -->
			<div class="modal-overlay" id="addGoalModal">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title" id="goalModalTitle">
							Add New Goal
						</h3>
						<button
							class="modal-close-btn"
							onclick="closeAddGoalModal()"
						>
							√ó
						</button>
					</div>
					<div class="modal-body">
						<form id="add-goal-form">
							<input
								type="hidden"
								id="editGoalId"
								name="goal_id"
							/>
							<div class="input-group">
								<label for="goalName" class="form-label"
									>Goal Description</label
								>
								<input
									type="text"
									id="goalName"
									name="goal_name"
									class="form-input"
									placeholder="e.g., Run 5km without stopping"
									required
								/>
							</div>
							<div class="input-row">
								<div>
									<label for="goalType" class="form-label"
										>Goal Type</label
									>
									<select
										id="goalType"
										name="goal_type"
										class="form-select"
										required
									>
                                        <option value="">Select Type...</option>
										<option value="steps">Steps per Day</option>
										<option value="exercise_duration">Exercise Minutes per Week</option>
										<option value="weight">Target Weight</option>
										<option value="water">Water Intake per Day (mL)</option>
                                        <option value="calories">Calories per Day</option>
                                        <option value="mindfulness">Mindfulness Minutes per Day</option>
										<option value="frequency">Activity Frequency (e.g., run 3 times/week)</option>
										<option value="custom">Custom / Milestone</option>
									</select>
								</div>
								<div>
									<label
										for="goalTargetValue"
										class="form-label"
										>Target Value</label
									>
									<input
										type="number"
										id="goalTargetValue"
										name="goal_target_value"
										class="form-input"
										placeholder="e.g., 10000, 70, 3, 2000"
										step="any"
									/>
								</div>
							</div>
							<div class="input-group">
								<label for="goalDeadline" class="form-label"
									>Deadline (Optional)</label
								>
								<input
									type="date"
									id="goalDeadline"
									name="goal_deadline"
									class="form-input"
								/>
							</div>
							<div class="input-group">
								<label for="goalNotes" class="form-label"
									>Notes (Optional)</label
								>
								<textarea
									id="goalNotes"
									name="goal_notes"
									class="form-textarea"
									rows="2"
								></textarea>
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button
							type="button"
							class="button button-secondary"
							onclick="closeAddGoalModal()"
						>
							Cancel
						</button>
						<button
							type="button"
							class="button button-primary"
							onclick="saveGoal()"
						>
							Save Goal
						</button>
					</div>
				</div>
			</div>

			<!-- Bottom Navigation Bar -->
			<nav class="bottom-nav" id="bottomNav">
				<button
					onclick="window.location.href='todo.shtml'"
					class="nav-item"
					data-page="home"
				>
					<span class="nav-icon">üè†</span>
					<span class="nav-label">Home</span>
				</button>
				<button
					onclick="window.location.href='progress.shtml'"
					class="nav-item"
					data-page="progress"
				>
					<span class="nav-icon">üìä</span>
					<span class="nav-label">Progress</span>
				</button>
				<button
					onclick="window.location.href='log-meal.shtml'"
					class="nav-item"
					data-page="log-meal"
				>
					<span class="nav-icon">üçî</span>
					<span class="nav-label">Log Meal</span>
				</button>
				<button
					onclick="window.location.href='log-exercise.shtml'"
					class="nav-item"
					data-page="log-exercise"
				>
					<span class="nav-icon">üèÉ</span>
					<span class="nav-label">Log Exercise</span>
				</button>
				<button
					onclick="window.location.href='profile.shtml'"
					class="nav-item active"
					data-page="profile"
				>
					<span class="nav-icon">üë§</span>
					<span class="nav-label">Profile</span>
				</button>
			</nav>
		</div>
		<!-- End ipad Container -->

		<script>
			let userProfile = {}; // Global profile object
			let userGoals = []; // Global goals array
			let userAchievements = []; // Global achievements array

            function getISODateString(date) {
				return date.toISOString().split("T")[0];
			}
             // --- Helper to get CSS Variable Value ---
            function getCssVariable(variable) {
                return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
            }

			// --- Profile Functions ---
			function loadProfileData() {
				userProfile = JSON.parse(localStorage.getItem("userProfile") || "{}");
                // Update display elements
				document.getElementById("displayUsername").textContent = userProfile.username || "User Name";

                const ageText = userProfile.age ? `Age: ${userProfile.age}` : 'Age: --';
                const genderText = userProfile.gender ? `Gender: ${userProfile.gender}` : 'Gender: --';
                const heightText = userProfile.height_cm ? `Height: ${userProfile.height_cm} cm` : 'Height: -- cm';
                const weightText = userProfile.weight_kg ? `Weight: ${userProfile.weight_kg} kg` : 'Weight: -- kg';
				document.getElementById("displayUserDetails").textContent = `${ageText} | ${genderText} | ${heightText} | ${weightText}`;

				document.getElementById("displayUserBio").textContent = userProfile.bio || "Edit your profile to add a bio and update your details.";

				// Update stats boxes (requires data aggregation - simplified examples)
				document.getElementById('statAvgSteps').textContent = calculateAvgSteps(30).toLocaleString(); // Avg steps last 30d
				document.getElementById('statWeeklyRun').textContent = calculateWeeklyRunDistance().toFixed(1);
                document.getElementById('statAvgCaloriesBurned').textContent = calculateAvgCaloriesBurned(30).toLocaleString();
                document.getElementById('statStrengthWorkouts').textContent = calculateAvgStrengthWorkouts(30);
				document.getElementById('statWeightTrend').textContent = calculateWeightTrend(30); // Last 30d trend
                document.getElementById('statAchievementsCount').textContent = userAchievements.length;
			}

            // --- Stat Calculation Helpers (Simplified Examples) ---
            function calculateAvgSteps(days) {
                let totalSteps = 0;
                let count = 0;
                const endDate = new Date();
                for (let i = 0; i < days; i++) {
                    let date = new Date(endDate);
                    date.setDate(endDate.getDate() - i);
                    let dateStr = getISODateString(date);
                    let dailyLog = JSON.parse(localStorage.getItem(`dailyLog_${dateStr}`) || '{}');
                    if (dailyLog.steps !== undefined) {
                        totalSteps += dailyLog.steps;
                        count++;
                    }
                }
                return count > 0 ? Math.round(totalSteps / count) : '--';
            }
            function calculateWeeklyRunDistance() {
                 let totalDistance = 0;
                 const endDate = new Date();
                 const startDate = new Date();
                 startDate.setDate(endDate.getDate() - 6); // Last 7 days including today

                 const history = JSON.parse(localStorage.getItem("exerciseHistory") || "[]");
                 history.forEach(entry => {
                     const entryDate = entry.exercise_date ? new Date(entry.exercise_date + 'T00:00:00') : null;
                     if (entryDate && entryDate >= startDate && entryDate <= endDate && entry.exercise_type.toLowerCase() === 'running') {
                         let distKm = parseFloat(entry.exercise_distance) || 0;
                         if (entry.exercise_distance_unit === "miles") distKm *= 1.609;
                         else if (entry.exercise_distance_unit === "meters") distKm /= 1000;
                         else if (entry.exercise_distance_unit === "yards") distKm *= 0.0009144;
                         totalDistance += distKm;
                     }
                 });
                 return totalDistance;
            }
             function calculateAvgCaloriesBurned(days) {
                // This is tricky - needs estimation based on exercise logs or total daily expenditure
                // Simple example: Sum calories from exercise logs
                let totalCalories = 0;
                let activeDays = new Set();
                const endDate = new Date();
                const startDate = new Date();
                startDate.setDate(endDate.getDate() - (days - 1));

                const history = JSON.parse(localStorage.getItem("exerciseHistory") || "[]");
                history.forEach(entry => {
                    const entryDate = entry.exercise_date ? new Date(entry.exercise_date + 'T00:00:00') : null;
                    if (entryDate && entryDate >= startDate && entryDate <= endDate && entry.exercise_calories) {
                        totalCalories += parseFloat(entry.exercise_calories);
                        activeDays.add(entry.exercise_date);
                    }
                });
                return activeDays.size > 0 ? Math.round(totalCalories / activeDays.size) : '--';
            }
            function calculateAvgStrengthWorkouts(days) {
                let workoutCount = 0;
                const endDate = new Date();
                const startDate = new Date();
                startDate.setDate(endDate.getDate() - (days - 1));
                const numWeeks = days / 7;

                const history = JSON.parse(localStorage.getItem("exerciseHistory") || "[]");
                history.forEach(entry => {
                    const entryDate = entry.exercise_date ? new Date(entry.exercise_date + 'T00:00:00') : null;
                    const type = entry.exercise_type.toLowerCase();
                    if (entryDate && entryDate >= startDate && entryDate <= endDate && (type.includes('strength') || type.includes('weightlifting'))) {
                         workoutCount++;
                    }
                });
                return numWeeks > 0 ? (workoutCount / numWeeks).toFixed(1) : '--';
            }
             function calculateWeightTrend(days) {
				const weightLog = JSON.parse(localStorage.getItem("weightLog") || "[]").sort((a,b) => new Date(a.date) - new Date(b.date));
				if (weightLog.length < 1) return "--"; // Need at least one entry

				const endDate = new Date();
				const startDate = new Date();
				startDate.setDate(endDate.getDate() - (days - 1));

				const relevantEntries = weightLog.filter(e => {
                    const entryDate = e.date ? new Date(e.date + 'T00:00:00') : null;
                    return entryDate && entryDate >= startDate && entryDate <= endDate;
                });

                if (relevantEntries.length < 2) { // Need at least 2 points for a trend
                     return (relevantEntries.length === 1) ? `${relevantEntries[0].weight}` : "--"; // Show current if only one point
                }

				const startW = relevantEntries[0].weight;
				const endW = relevantEntries[relevantEntries.length - 1].weight;
				const trend = (endW - startW);
                const sign = trend > 0 ? '+' : '';
				return `${sign}${trend.toFixed(1)}`; // Show signed trend
			}
            // --- End Stat Helpers ---


			function openEditProfileModal() {
				// Populate modal with current data
				document.getElementById("editUsername").value = userProfile.username || "";
				document.getElementById("editAge").value = userProfile.age || "";
				document.getElementById("editGender").value = userProfile.gender || "";
				document.getElementById("editHeight").value = userProfile.height_cm || "";
				document.getElementById("editWeight").value = userProfile.weight_kg || "";
				document.getElementById("editBio").value = userProfile.bio || "";
				document.getElementById("editProfileModal").classList.add("active");
			}
			function closeEditProfileModal() {
				document.getElementById("editProfileModal").classList.remove("active");
			}
			function saveProfile() {
				const form = document.getElementById("edit-profile-form");
				userProfile.username = form.elements["username"].value.trim();
				userProfile.age = form.elements["age"].value || null; // Store as null if empty
				userProfile.gender = form.elements["gender"].value || null;
				userProfile.height_cm = form.elements["height_cm"].value || null;
				userProfile.weight_kg = form.elements["weight_kg"].value || null;
				userProfile.bio = form.elements["bio"].value.trim();

                if (!userProfile.username) {
                    alert("Username is required.");
                    form.elements["username"].focus();
                    return;
                }

				localStorage.setItem("userProfile", JSON.stringify(userProfile));

				// Also update latest weight in weight log if changed here
                if (userProfile.weight_kg) {
				    const today = getISODateString(new Date());
				    logWeightValue(today, userProfile.weight_kg); // Function to update weight log
                }

                loadProfileData(); // Update display immediately
				closeEditProfileModal();
				alert("Profile Updated!");
			}
			function changePicture() {
				alert("Image Upload/Selection feature not implemented in this demo.");
			}

			// Helper to update weight log (ensure it exists)
			function logWeightValue(date, weight) {
				if (!date || isNaN(parseFloat(weight))) return;
				let weightLog = JSON.parse(localStorage.getItem("weightLog") || "[]");
				const existingIndex = weightLog.findIndex(e => e.date === date);
				if (existingIndex > -1) {
					weightLog[existingIndex].weight = parseFloat(weight);
				} else {
					weightLog.push({ date: date, weight: parseFloat(weight) });
				}
				weightLog.sort((a, b) => new Date(a.date) - new Date(b.date));
				localStorage.setItem("weightLog", JSON.stringify(weightLog));
			}


			function loadGoals() {
				userGoals = JSON.parse(localStorage.getItem("userGoals") || "[]");
				const list = document.getElementById("goalList");
				const noGoalsMsg = document.getElementById("noGoals");
				list.innerHTML = ""; // Clear list

				if (userGoals.length === 0) {
					noGoalsMsg.classList.remove("d-none");
					return;
				}

				noGoalsMsg.classList.add("d-none");
				userGoals.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)); // Sort by creation date

				userGoals.forEach((goal) => {
					const item = document.createElement("li");
					item.classList.add("goal-item");
					item.dataset.goalId = goal.id;

                    let goalDetailText = '';
                    if (goal.targetValue) {
                        let unit = '';
                        if (goal.type === 'steps') unit = 'steps/day';
                        else if (goal.type === 'water') unit = 'mL/day';
                        else if (goal.type === 'exercise_duration') unit = 'min/week';
                        else if (goal.type === 'calories') unit = 'kcal/day';
                        else if (goal.type === 'weight') unit = 'kg';
                        else if (goal.type === 'mindfulness') unit = 'min/day';
                        else if (goal.type === 'frequency') unit = 'times/week'; // Example
                        goalDetailText = `Target: ${goal.targetValue} ${unit}`;
                    } else if (goal.type === 'custom'){
                        goalDetailText = "Milestone Goal";
                    }
                    if (goal.deadline) goalDetailText += ` (Due: ${goal.deadline})`;


					item.innerHTML = `
                        <div class="goal-info">
                            <div class="goal-name">${goal.name}</div>
                            <div class="goal-details">${goalDetailText}</div>
                            ${goal.notes ? `<div class="goal-details" style="margin-top: 5px; font-style: italic;">Notes: ${goal.notes}</div>` : ""}
                        </div>
                        <div class="goal-actions">
                             <button class="action-icon" title="Edit Goal" onclick="editGoal('${goal.id}')">‚úèÔ∏è</button>
                             <button class="action-icon" title="Delete Goal" onclick="deleteGoal('${goal.id}')" style="color: var(--accent-red);">üóëÔ∏è</button>
                        </div>
                    `;
					list.appendChild(item);
				});
			}

			function openAddGoalModal() {
				document.getElementById("add-goal-form").reset();
				document.getElementById("editGoalId").value = ""; // Clear edit ID
				document.getElementById("goalModalTitle").textContent = "Add New Goal";
				document.getElementById("addGoalModal").classList.add("active");
			}
			function closeAddGoalModal() {
				document.getElementById("addGoalModal").classList.remove("active");
			}
			function saveGoal() {
				const form = document.getElementById("add-goal-form");
				const goalId = form.elements["goal_id"].value;
                const goalName = form.elements["goal_name"].value.trim();
                const goalType = form.elements["goal_type"].value;

				if (!goalName || !goalType) {
					alert("Please enter a goal description and select a type.");
					return;
				}

                // Find existing goal data if editing
                const existingGoal = goalId ? userGoals.find((g) => g.id === goalId) : null;

				const goalData = {
					id: goalId || Date.now().toString(), // Use existing ID if editing, else generate new
					name: goalName,
					type: goalType,
					targetValue: form.elements["goal_target_value"].value || null, // Store null if empty
					deadline: form.elements["goal_deadline"].value || null,
					notes: form.elements["goal_notes"].value.trim() || null,
					createdAt: existingGoal?.createdAt || new Date().toISOString(), // Keep original creation date
					status: existingGoal?.status || "active", // Keep status or default
				};

				if (goalId) {
					// Editing existing goal
					const index = userGoals.findIndex((g) => g.id === goalId);
					if (index > -1) userGoals[index] = goalData;
				} else {
					// Adding new goal
					userGoals.push(goalData);
				}

				localStorage.setItem("userGoals", JSON.stringify(userGoals));
				loadGoals(); // Refresh the list
				closeAddGoalModal();
			}
			function editGoal(goalId) {
				const goal = userGoals.find((g) => g.id === goalId);
				if (!goal) return;

				// Populate modal
				document.getElementById("editGoalId").value = goal.id;
				document.getElementById("goalName").value = goal.name;
				document.getElementById("goalType").value = goal.type;
				document.getElementById("goalTargetValue").value = goal.targetValue || "";
				document.getElementById("goalDeadline").value = goal.deadline || "";
				document.getElementById("goalNotes").value = goal.notes || "";
				document.getElementById("goalModalTitle").textContent = "Edit Goal";
				document.getElementById("addGoalModal").classList.add("active");
			}
			function deleteGoal(goalId) {
				if (confirm("Are you sure you want to delete this goal?")) {
					userGoals = userGoals.filter((g) => g.id !== goalId);
					localStorage.setItem("userGoals", JSON.stringify(userGoals));
					loadGoals();
                    loadProfileData(); // Update stats that might depend on goals
				}
			}

			// --- Achievement Functions ---
			function loadAchievements() {
				userAchievements = JSON.parse(localStorage.getItem("userAchievements") || "[]");
				const grid = document.getElementById("achievementsGrid");
				const noAchievementsMsg = document.getElementById("noAchievementsProfile");
				grid.innerHTML = "";

				if (userAchievements.length === 0) {
					noAchievementsMsg.classList.remove("d-none");
                    document.getElementById("statAchievementsCount").textContent = '0'; // Update stat count
					return;
				}

				noAchievementsMsg.classList.add("d-none");
                userAchievements.sort((a,b) => (new Date(b.achievedAt || 0) - new Date(a.achievedAt || 0))); // Sort by date achieved if available

				// Only display up to 4 achievements (reduced)
				const limitedAchievements = userAchievements.slice(0, 4);
				limitedAchievements.forEach((ach) => {
                    const iconColor = ach.color ? getCssVariable(ach.color) : getCssVariable('--primary-color'); // Use theme color
					const badge = document.createElement("div");
					badge.classList.add("achievement-badge");
					badge.title = `${ach.name} (Achieved: ${ach.date})`; // Keep date in title
					badge.innerHTML = `
                        <div class="achievement-badge-name">${ach.name}</div>
                     `;
					badge.onclick = () => alert(`Achievement: ${ach.name}\nAchieved: ${ach.date}`);
					grid.appendChild(badge);
				});
                // Update stat count after loading
				document.getElementById("statAchievementsCount").textContent = userAchievements.length;
			}

			// --- Settings Functions ---
			function loadSettings() {
				// Load notification preference
				const notificationsEnabled = localStorage.getItem("notificationsEnabled") === "true";
				document.getElementById("notificationToggle").classList.toggle("active", notificationsEnabled);
				// Dark Mode toggle removed
			}

			function toggleNotifications() {
				const toggle = document.getElementById("notificationToggle");
				const isActive = toggle.classList.toggle("active");
				localStorage.setItem("notificationsEnabled", isActive);
				alert(`Daily notifications ${isActive ? "enabled" : "disabled"}. (Simulation only)`);
			}

			// Dark mode toggle function removed

			function exportData() {
                try {
                    const dataToExport = {
                        profile: JSON.parse(localStorage.getItem("userProfile") || "{}"),
                        goals: JSON.parse(localStorage.getItem("userGoals") || "[]"),
                        achievements: JSON.parse(localStorage.getItem("userAchievements") || "[]"),
                        weightLog: JSON.parse(localStorage.getItem("weightLog") || "[]"),
                        mealHistory: JSON.parse(localStorage.getItem("mealHistory") || "[]"),
                        exerciseHistory: JSON.parse(localStorage.getItem("exerciseHistory") || "[]"),
                        // Add daily logs if desired
                    };
                    const dataStr = JSON.stringify(dataToExport, null, 2); // Pretty print JSON
                    const blob = new Blob([dataStr], {type: "application/json"});
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    const dateStr = new Date().toISOString().split('T')[0];
                    link.download = `wellness_hub_data_${dateStr}.json`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                     alert("Data export initiated. Check your downloads.");
                } catch (e) {
                    console.error("Error exporting data:", e);
                    alert("Could not export data. See console for details.");
                }

			}
			function logout() {
				if (confirm("Are you sure you want to log out?")) {
					alert("Logging out... (Simulation: Clearing some data)");
					// Clear sensitive data - adjust as needed for a real app
					localStorage.removeItem('userProfile');
					localStorage.removeItem('userGoals');
                    // Potentially clear logs too, or keep them for anonymous use?
                    // localStorage.removeItem('weightLog');
                    // localStorage.removeItem('mealHistory');
                    // localStorage.removeItem('exerciseHistory');
                    // Redirect to a hypothetical login page or the dashboard
					window.location.href = 'todo.shtml'; // Go back to dashboard after simulated logout
				}
			}

			function scrollToSection(sectionId) {
				const element = document.getElementById(sectionId);
				if (element) {
					element.scrollIntoView({
						behavior: "smooth",
						block: "start",
					});
				}
			}
			function navigateTo(url) {
				console.log("Navigating to:", url);
				if (url && url !== "#") {
					window.location.href = url;
				} else {
                    console.warn(`Navigation to ${url} not implemented or invalid.`);
				}
			}

			document.addEventListener("DOMContentLoaded", () => {
                // Load necessary data first
                userProfile = JSON.parse(localStorage.getItem("userProfile") || "{}");
                userGoals = JSON.parse(localStorage.getItem("userGoals") || "[]");
                userAchievements = JSON.parse(localStorage.getItem("userAchievements") || "[]");

                // Then load UI components that depend on the data
				loadProfileData();
				loadGoals();
				loadAchievements();
				loadSettings();
			});
		</script>
	</body>
</html>
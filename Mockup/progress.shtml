<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>Progress & Stats - iPad View</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="shared-styles.css" />
		<!-- Include Chart.js library -->
		<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
		<!-- Date Adapter -->

		<style>
			.progress-section {
				background-color: var(--surface-color);
				border-radius: var(--card-border-radius);
				margin-bottom: 25px;
				padding: var(--content-padding);
				box-shadow: 0 5px 15px var(--shadow-color);
				border: 1px solid var(--border-color); /* Use theme border */
			}
			/* Removed light mode specific border */

			.section-title {
				font-size: 18px;
				font-weight: 600;
				color: var(--text-primary);
				margin: 0 0 20px 0;
				padding-bottom: 15px;
				border-bottom: 1px solid var(--surface-secondary-color);
				display: flex;
				align-items: center;
				justify-content: space-between;
			}
			.section-title-icon {
				font-size: 20px;
				margin-right: 10px; /* Color set per section */
			}
			.section-controls {
				font-size: 14px;
				display: flex;
				gap: 10px;
				align-items: center;
			}
			.section-controls select,
			.section-controls button {
				padding: 6px 12px;
				font-size: 13px;
				border: 1px solid var(--border-color);
				border-radius: 8px;
				background-color: var(--surface-secondary-color);
				color: var(--text-link); /* Use link color for select text */
				cursor: pointer;
			}
			.section-controls button {
				background-color: var(--surface-secondary-color);
				color: var(--text-link);
				font-weight: 500;
			}
			.section-controls button:hover {
				background-color: var(--border-color); /* Use border color for hover */
			}

			.chart-container {
				position: relative;
				height: 280px;
				width: 100%;
				margin-bottom: 20px;
			}

			.summary-stats-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
				gap: 15px;
				margin-top: 20px;
			}
			.summary-stat {
				background-color: var(--background-color); /* Use app background */
				padding: 15px;
				border-radius: 12px; /* Match card radius */
                border: 1px solid var(--border-color); /* Add subtle border */
				text-align: center;
			}
			.summary-stat-value {
				font-size: 20px;
				font-weight: 600;
				color: var(--text-primary);
				margin-bottom: 4px;
			}
			.summary-stat-label {
				font-size: 12px;
				color: var(--text-secondary);
				text-transform: uppercase;
				letter-spacing: 0.3px;
			}

			.achievements-list {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.achievement-item {
				display: flex;
				align-items: center;
				padding: 12px 0;
				border-bottom: 1px solid var(--surface-secondary-color);
			}
			.achievement-item:last-child {
				border-bottom: none;
			}
			.achievement-icon {
				font-size: 28px;
				margin-right: 15px;
				flex-shrink: 0; /* Color set per achievement */
			}
			.achievement-details {
				flex-grow: 1;
			}
			.achievement-name {
				font-weight: 600;
				color: var(--text-primary);
				font-size: 16px;
			}
			.achievement-date {
				font-size: 13px;
				color: var(--text-secondary);
				margin-top: 3px;
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<!-- Header -->
			<div class="header">
				<div class="header-spacer"></div>
				<!-- Spacer -->
				<span class="header-title">Progress & Stats</span>
				<div class="header-spacer"></div>
				<!-- Spacer -->
			</div>

			<!-- Main Scrollable Content Area -->
			<div class="main-content">
				<!-- Section 1: Activity Trends -->
				<section class="progress-section">
					<h2 class="section-title">
						<div>
							<span
								class="section-title-icon"
								style="color: var(--primary-color)" /* Blue */
								></span
							>Activity Trends
						</div>
						<div class="section-controls">
							<label
								for="activityStatType"
								class="visually-hidden"
								>Stat Type:</label
							>
							<select
								id="activityStatType"
								onchange="updateActivityChart()"
							>
								<option value="steps" selected>Steps</option>
								<option value="duration">
									Exercise Duration
								</option>
								<option value="distance">
									Distance (Running)
								</option>
								<!-- Add more relevant stats -->
							</select>
							<label
								for="activityTrendPeriod"
								class="visually-hidden"
								>Period:</label
							>
							<select
								id="activityTrendPeriod"
								onchange="updateActivityChart()"
							>
								<option value="7d">Last 7 Days</option>
								<option value="30d" selected>
									Last 30 Days
								</option>
								<option value="90d">Last 90 Days</option>
								<option value="1y">Last Year</option>
							</select>
						</div>
					</h2>
					<div class="chart-container">
						<canvas id="activityChart"></canvas>
					</div>
					<div class="summary-stats-grid">
						<div class="summary-stat">
							<div class="summary-stat-value" id="avgSteps">
								--
							</div>
							<div class="summary-stat-label">Avg Steps/Day</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="avgExercise">
								-- min
							</div>
							<div class="summary-stat-label">
								Avg Exercise/Day
							</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="totalDistance">
								-- km
							</div>
							<div class="summary-stat-label">Total Distance</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="activeDays">
								-- days
							</div>
							<div class="summary-stat-label">Active Days</div>
						</div>
					</div>
				</section>

				<!-- Section 2: Nutrition Overview -->
				<section class="progress-section">
					<h2 class="section-title">
						<div>
							<span
								class="section-title-icon"
								style="color: var(--accent-red)" /* Red */
								></span
							>Nutrition Overview
						</div>
						<div class="section-controls">
							<label
								for="nutritionChartType"
								class="visually-hidden"
								>Chart Type:</label
							>
							<select
								id="nutritionChartType"
								onchange="updateNutritionChart()"
							>
								<option value="calories" selected>
									Calories Trend
								</option>
								<option value="macros">Macros Pie (Avg)</option>
							</select>
							<label
								for="nutritionTrendPeriod"
								class="visually-hidden"
								>Period:</label
							>
							<select
								id="nutritionTrendPeriod"
								onchange="updateNutritionChart()"
							>
								<option value="7d">Last 7 Days</option>
								<option value="30d" selected>
									Last 30 Days
								</option>
								<option value="90d">Last 90 Days</option>
							</select>
						</div>
					</h2>
					<div class="chart-container">
						<canvas id="nutritionChart"></canvas>
					</div>
					<div class="summary-stats-grid">
						<div class="summary-stat">
							<div class="summary-stat-value" id="avgCalories">
								-- kcal
							</div>
							<div class="summary-stat-label">
								Avg Calories/Day
							</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="avgProtein">
								-- g
							</div>
							<div class="summary-stat-label">Avg Protein</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="avgCarbs">
								-- g
							</div>
							<div class="summary-stat-label">Avg Carbs</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="avgFat">
								-- g
							</div>
							<div class="summary-stat-label">Avg Fat</div>
						</div>
					</div>
				</section>

				<!-- Section 3: Weight Trend -->
				<section class="progress-section">
					<h2 class="section-title">
						<div>
							<span
								class="section-title-icon"
								style="color: var(--accent-red)" /* Red */
								></span
							>Weight Trend
						</div>
						<div class="section-controls">
							<label
								for="weightTrendPeriod"
								class="visually-hidden"
								>Period:</label
							>
							<select
								id="weightTrendPeriod"
								onchange="updateWeightChart()"
							>
								<option value="30d" selected>
									Last 30 Days
								</option>
								<option value="90d">Last 90 Days</option>
								<option value="6m">Last 6 Months</option>
								<option value="1y">Last Year</option>
								<option value="all">All Time</option>
							</select>
							<button onclick="logWeight()">Log Weight</button>
						</div>
					</h2>
					<div class="chart-container">
						<canvas id="weightChart"></canvas>
					</div>
					<div class="summary-stats-grid">
						<div class="summary-stat">
							<div class="summary-stat-value" id="currentWeight">
								-- kg
							</div>
							<div class="summary-stat-label">Current Weight</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="weightChange">
								-- kg
							</div>
							<div class="summary-stat-label">
								Change (Period)
							</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="bmi">--</div>
							<div class="summary-stat-label">BMI</div>
						</div>
						<div class="summary-stat">
							<div class="summary-stat-value" id="weightGoal">
								-- kg
							</div>
							<div class="summary-stat-label">Weight Goal</div>
						</div>
					</div>
				</section>

				<!-- Section 4: Recent Achievements - Reduced -->
				<section class="progress-section">
					<h2 class="section-title">
						<div>
							<span
								class="section-title-icon"
								style="color: var(--primary-color)" /* Blue */
								></span
							>Recent Achievements
						</div>
						<div class="section-controls">
							<button
								onclick="navigateTo('profile.shtml#achievements')"
							>
								View All
							</button>
							<!-- Link to profile section -->
						</div>
					</h2>
					<ul class="achievements-list" id="achievementsList">
						<!-- Populated by JS - Only show 2 achievements -->
						<li class="achievement-item">
							<span
								class="achievement-icon"
								style="color: var(--accent-green)" /* Keep green */
								></span
							>
							<div class="achievement-details">
								<div class="achievement-name">
									10k Steps Milestone
								</div>
								<div class="achievement-date">
									Achieved: Yesterday
								</div>
							</div>
						</li>
						<li class="achievement-item">
							<span
								class="achievement-icon"
								style="color: var(--primary-color)" /* Blue */
								></span
							>
							<div class="achievement-details">
								<div class="achievement-name">
									Perfect Week
								</div>
								<div class="achievement-date">
									Achieved: 3 days ago
								</div>
							</div>
						</li>
					</ul>
					<p
						id="noAchievements"
						class="text-center text-tertiary d-none mt-2"
					>
						No achievements earned yet.
					</p>
				</section>
			</div>
			<!-- End Main Content -->

			<!-- Bottom Navigation Bar -->
			<nav class="bottom-nav" id="bottomNav">
				<button
					onclick="window.location.href='todo.shtml'"
					class="nav-item"
					data-page="home"
				>
					<span class="nav-icon">🏠</span>
					<span class="nav-label">Home</span>
				</button>
				<button
					onclick="window.location.href='progress.shtml'"
					class="nav-item active"
					data-page="progress"
				>
					<span class="nav-icon">📊</span>
					<span class="nav-label">Progress</span>
				</button>
				<button
					onclick="window.location.href='log-meal.shtml'"
					class="nav-item"
					data-page="log-meal"
				>
					<span class="nav-icon">🍔</span>
					<span class="nav-label">Log Meal</span>
				</button>
				<button
					onclick="window.location.href='log-exercise.shtml'"
					class="nav-item"
					data-page="log-exercise"
				>
					<span class="nav-icon">🏃</span>
					<span class="nav-label">Log Exercise</span>
				</button>
				<button
					onclick="window.location.href='profile.shtml'"
					class="nav-item"
					data-page="profile"
				>
					<span class="nav-icon">👤</span>
					<span class="nav-label">Profile</span>
				</button>
			</nav>
		</div>
		<!-- End ipad Container -->

		<script>
			// --- Chart Instances ---
			let activityChartInstance = null;
			let nutritionChartInstance = null;
			let weightChartInstance = null;

            // --- Helper to get CSS Variable Value ---
            function getCssVariable(variable) {
                return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
            }

			// Modify achievements mock data to reduce badges
			const MOCK_DATA = {
				weightLog: JSON.parse(
					localStorage.getItem("weightLog") ||
						'[{"date": "2023-10-01", "weight": 75}, {"date": "2023-10-15", "weight": 74.5}, {"date": "2023-11-01", "weight": 74}]'
				),
				mealHistory: JSON.parse(
					localStorage.getItem("mealHistory") || "[]"
				),
				exerciseHistory: JSON.parse(
					localStorage.getItem("exerciseHistory") || "[]"
				),
				profile: JSON.parse(
					localStorage.getItem("userProfile") || "{}"
				),
				goals: JSON.parse(localStorage.getItem("userGoals") || "[]"),
				achievements: JSON.parse(
					localStorage.getItem("userAchievements") ||
						'[{"name": "10k Steps Milestone", "date": "Yesterday", "icon": "", "color": "--accent-green"}, {"name": "Perfect Week", "date": "3 days ago", "icon": "", "color": "--primary-color"}]'
				), // Reduced achievements with empty icons
			};

			function saveMockData() {
				localStorage.setItem(
					"weightLog",
					JSON.stringify(MOCK_DATA.weightLog)
				);
				localStorage.setItem(
					"mealHistory",
					JSON.stringify(MOCK_DATA.mealHistory)
				);
				localStorage.setItem(
					"exerciseHistory",
					JSON.stringify(MOCK_DATA.exerciseHistory)
				);
				localStorage.setItem(
					"userAchievements",
					JSON.stringify(MOCK_DATA.achievements)
				);
			}

			function getDateRange(period) {
				const endDate = new Date();
				let startDate = new Date();
				let numDays = 7;

				switch (period) {
					case "30d":
						numDays = 30;
						break;
					case "90d":
						numDays = 90;
						break;
					case "6m":
						numDays = 180; // Approx 6 months
						break;
					case "1y":
						numDays = 365;
						break;
					case "all":
						// Find earliest date in logs if possible, otherwise default
                        const earliestWeight = MOCK_DATA.weightLog.length > 0 ? new Date(MOCK_DATA.weightLog[0].date) : new Date(2000, 0, 1);
                        // Add checks for other logs if needed
                        startDate = earliestWeight; // Use earliest known date
						break;
					case "7d":
					default:
						numDays = 7;
						break;
				}
				if (period !== "all") {
					startDate.setDate(endDate.getDate() - numDays);
				}
                // Ensure start date is not before a reasonable minimum if needed
                const minDate = new Date(2000, 0, 1);
                if (startDate < minDate) startDate = minDate;

				return { startDate, endDate };
			}

			const chartDefaultOptions = (isDarkMode = false) => ({ // Accept dark mode flag if needed later, though removed now
				responsive: true,
				maintainAspectRatio: false,
				interaction: { intersect: false, mode: "index" },
				scales: {
					x: {
						type: "time",
						time: { unit: "day" },
						grid: { display: false },
                        ticks: { color: getCssVariable('--text-secondary') } // Use CSS var for ticks
					},
					y: {
						beginAtZero: true,
						grid: { color: getCssVariable('--border-color') }, // Use CSS var for grid lines
                        ticks: { color: getCssVariable('--text-secondary') } // Use CSS var for ticks
					},
				},
				plugins: {
					legend: {
                        display: false,
                        labels: { color: getCssVariable('--text-primary') } // Use CSS var
                     },
					tooltip: {
                        enabled: true,
                        backgroundColor: 'rgba(0, 0, 0, 0.8)', // Keep tooltip dark for contrast
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                    },
				},
				elements: {
                    point: {
                        radius: 3,
                        hoverRadius: 5,
                        backgroundColor: getCssVariable('--primary-color') // Default point color
                    },
                    line: {
                         borderColor: getCssVariable('--primary-color'), // Default line color
                         tension: 0.3
                    }
                },
			});

			function updateActivityChart() {
				const period = document.getElementById(
					"activityTrendPeriod"
				).value;
				const statType =
					document.getElementById("activityStatType").value;
				const { startDate, endDate } = getDateRange(period);
				const ctx = document
					.getElementById("activityChart")
					?.getContext("2d");
				if (!ctx) return;

				const filteredData = MOCK_DATA.exerciseHistory.filter(
					(entry) => {
                        // Ensure date parsing is robust
                        const entryDate = entry.exercise_date ? new Date(entry.exercise_date + 'T00:00:00') : null; // Add time to avoid timezone issues
						return entryDate && entryDate >= startDate && entryDate <= endDate;
					}
				);

				const aggregatedData = {};
				filteredData.forEach((entry) => {
					const dateStr = entry.exercise_date;
					if (!aggregatedData[dateStr])
						aggregatedData[dateStr] = {
							steps: 0,
							duration: 0,
							distance: 0,
							count: 0,
						};

					let value = 0;
					// Use daily log for steps if available and type matches
                    const dailyLog = JSON.parse(localStorage.getItem(`dailyLog_${dateStr}`) || '{}');

					switch (statType) {
						case "steps":
                            // Prioritize daily log steps if available, otherwise estimate
                            if (dailyLog.steps !== undefined) {
                                value = dailyLog.steps;
                            } else if (entry.exercise_type.toLowerCase() === 'walking' || entry.exercise_type.toLowerCase() === 'running') {
                                // Fallback estimation (less accurate)
								value = (parseFloat(entry.exercise_distance) || 0) * (entry.exercise_distance_unit === "km" ? 1250 : 2000);
							}
							break;
						case "duration":
							value = parseFloat(entry.exercise_duration) || 0;
							break;
						case "distance":
							if (
								entry.exercise_type.toLowerCase() === "running"
							) {
								let distKm =
									parseFloat(entry.exercise_distance) || 0;
								if (entry.exercise_distance_unit === "miles")
									distKm *= 1.609;
								else if (
									entry.exercise_distance_unit === "meters"
								)
									distKm /= 1000;
								else if (
									entry.exercise_distance_unit === "yards"
								)
									distKm *= 0.0009144;
								value = distKm;
							}
							break;
					}
                    // Aggregate based on stat type correctly
                    if (statType === 'steps') {
                         // Steps are aggregated per day, not per exercise entry unless it's the only source
                         aggregatedData[dateStr][statType] = Math.max(aggregatedData[dateStr][statType] || 0, value); // Take max steps logged/estimated for the day
                    } else {
					    aggregatedData[dateStr][statType] = (aggregatedData[dateStr][statType] || 0) + value;
                    }
					aggregatedData[dateStr].count++;
				});

				const chartData = Object.entries(aggregatedData)
					.map(([date, values]) => ({
						x: date,
						y: values[statType] || 0,
					}))
					.sort((a, b) => new Date(a.x) - new Date(b.x)); // Sort by date

                const primaryColor = getCssVariable('--primary-color');

				if (activityChartInstance) activityChartInstance.destroy();
				activityChartInstance = new Chart(ctx, {
					type: "line",
					data: {
						datasets: [
							{
								label:
									statType.charAt(0).toUpperCase() +
									statType.slice(1),
								data: chartData,
								borderColor: primaryColor,
								backgroundColor: primaryColor + '1A', // Add alpha using hex notation if possible, or use rgba
								fill: true,
								tension: 0.3,
                                pointBackgroundColor: primaryColor,
							},
						],
					},
					options: {
						...chartDefaultOptions(),
						scales: {
							...chartDefaultOptions().scales,
                            y: { ...chartDefaultOptions().scales.y, beginAtZero: true }, // Ensure y starts at 0
							x: {
								...chartDefaultOptions().scales.x,
								time: {
									unit: period === "1y" ? "month" : "day",
								},
							},
						},
					},
				});

                // Update Summary Stats - Calculate based on aggregated data for accuracy
                let totalSteps = 0, totalDuration = 0, totalDist = 0;
                const days = new Set(Object.keys(aggregatedData));
                Object.values(aggregatedData).forEach(dayData => {
                    totalSteps += dayData.steps || 0;
                    totalDuration += dayData.duration || 0;
                    totalDist += dayData.distance || 0;
                });

				const numDays = days.size || 1;
				document.getElementById("avgSteps").textContent = Math.round(totalSteps / numDays).toLocaleString();
				document.getElementById("avgExercise").textContent = `${Math.round(totalDuration / numDays)} min`;
				document.getElementById("totalDistance").textContent = `${totalDist.toFixed(1)} km`;
				document.getElementById("activeDays").textContent = `${days.size} days`;
			}

			function updateNutritionChart() {
				const period = document.getElementById(
					"nutritionTrendPeriod"
				).value;
				const chartType =
					document.getElementById("nutritionChartType").value;
				const { startDate, endDate } = getDateRange(period);
				const ctx = document
					.getElementById("nutritionChart")
					?.getContext("2d");
				if (!ctx) return;

				const filteredData = MOCK_DATA.mealHistory.filter((entry) => {
					const entryDate = entry.date ? new Date(entry.date + 'T00:00:00') : null;
					return entryDate && entryDate >= startDate && entryDate <= endDate;
				});

				let totalCalories = 0,
					totalProtein = 0,
					totalCarbs = 0,
					totalFat = 0;
				const daysCounted = new Set(filteredData.map((e) => e.date)).size || 1;

				filteredData.forEach((meal) => {
					totalCalories += meal.summary?.calories || 0;
					totalProtein += meal.summary?.protein || 0;
					totalCarbs += meal.summary?.carbs || 0;
					totalFat += meal.summary?.fat || 0;
				});

				const avgCalories = Math.round(totalCalories / daysCounted);
				const avgProtein = Math.round(totalProtein / daysCounted);
				const avgCarbs = Math.round(totalCarbs / daysCounted);
				const avgFat = Math.round(totalFat / daysCounted);

				document.getElementById("avgCalories").textContent = `${avgCalories.toLocaleString()} kcal`;
				document.getElementById("avgProtein").textContent = `${avgProtein} g`;
				document.getElementById("avgCarbs").textContent = `${avgCarbs} g`;
				document.getElementById("avgFat").textContent = `${avgFat} g`;

                // Get theme colors
                const accentRed = getCssVariable('--accent-red');
                const accentGreen = getCssVariable('--accent-green'); // Assuming green for protein
                const accentTeal = getCssVariable('--accent-teal'); // Assuming teal for carbs


				if (nutritionChartInstance) nutritionChartInstance.destroy();

				if (chartType === "calories") {
					const aggregatedData = {};
					filteredData.forEach((entry) => {
						const dateStr = entry.date;
						aggregatedData[dateStr] =
							(aggregatedData[dateStr] || 0) +
							(entry.summary?.calories || 0);
					});
					const chartData = Object.entries(aggregatedData)
						.map(([date, value]) => ({ x: date, y: value }))
						.sort((a, b) => new Date(a.x) - new Date(b.x));

					nutritionChartInstance = new Chart(ctx, {
						type: "bar",
						data: {
							datasets: [
								{
									label: "Daily Calories",
									data: chartData,
									backgroundColor: accentRed, // Use accent red for calories
                                    borderColor: accentRed,
								},
							],
						},
						options: {
							...chartDefaultOptions(),
							scales: {
                                ...chartDefaultOptions().scales,
                                y: { ...chartDefaultOptions().scales.y, beginAtZero: true },
								x: {
									...chartDefaultOptions().scales.x,
									time: {
										unit: period === "90d" ? "week" : "day",
									},
								},
							},
						},
					});
				} else {
					// Macros Pie
					nutritionChartInstance = new Chart(ctx, {
						type: "doughnut",
						data: {
							labels: ["Protein (g)", "Carbs (g)", "Fat (g)"],
							datasets: [
								{
									label: "Avg Macros",
									data: [avgProtein, avgCarbs, avgFat],
									backgroundColor: [
										accentGreen, // Green for Protein
										accentTeal,  // Teal for Carbs
										accentRed,   // Red for Fat
									],
                                    borderColor: getCssVariable('--surface-color'), // White border between segments
                                    borderWidth: 2,
									hoverOffset: 4,
								},
							],
						},
						options: {
							responsive: true,
							maintainAspectRatio: false,
							plugins: {
                                legend: {
                                    position: "bottom",
                                    labels: { color: getCssVariable('--text-primary') }
                                },
                                tooltip: chartDefaultOptions().plugins.tooltip // Use default tooltip style
                            },
						},
					});
				}
			}

			function updateWeightChart() {
				const period =
					document.getElementById("weightTrendPeriod").value;
				const { startDate, endDate } = getDateRange(period);
				const ctx = document
					.getElementById("weightChart")
					?.getContext("2d");
				if (!ctx) return;

				const filteredData = MOCK_DATA.weightLog
					.filter((entry) => {
						const entryDate = entry.date ? new Date(entry.date + 'T00:00:00') : null;
						return entryDate && entryDate >= startDate && entryDate <= endDate;
					})
					.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort by date

				const chartData = filteredData.map((entry) => ({
					x: entry.date,
					y: entry.weight,
				}));

                const accentRed = getCssVariable('--accent-red');

				if (weightChartInstance) weightChartInstance.destroy();
				weightChartInstance = new Chart(ctx, {
					type: "line",
					data: {
						datasets: [
							{
								label: "Weight (kg)",
								data: chartData,
								borderColor: accentRed,
								backgroundColor: accentRed + '1A', // Red with alpha
								fill: false, // Usually don't fill weight chart
								tension: 0.1,
                                pointBackgroundColor: accentRed,
							},
						],
					},
					options: {
						...chartDefaultOptions(),
						scales: {
							...chartDefaultOptions().scales,
							y: { ...chartDefaultOptions().scales.y, beginAtZero: false }, // Don't necessarily start Y at 0 for weight
							x: {
								...chartDefaultOptions().scales.x,
								time: {
									unit:
										period === "1y" || period === "all" || period === "6m"
											? "month"
											: period === "90d" ? "week" : "day",
								},
							},
						},
					},
				});

				const currentWeight =
					filteredData.length > 0
						? filteredData[filteredData.length - 1].weight
						: MOCK_DATA.profile.weight_kg || "--"; // Fallback to profile weight
				const startWeight =
					filteredData.length > 0 ? filteredData[0].weight : null;
				const weightChange =
					startWeight !== null && currentWeight !== "--"
						? (currentWeight - startWeight).toFixed(1)
						: "--";
				const profileHeight = MOCK_DATA.profile.height_cm; // Get height from profile
				const bmi =
					currentWeight !== "--" && profileHeight && profileHeight > 0
						? (currentWeight / (profileHeight / 100) ** 2).toFixed(1)
						: "--";
				const weightGoal =
					MOCK_DATA.goals.find((g) => g.type === "weight")?.targetValue || "--";

				document.getElementById("currentWeight").textContent = `${currentWeight} kg`;
				document.getElementById("weightChange").textContent = `${weightChange} kg`;
				document.getElementById("bmi").textContent = bmi;
				document.getElementById("weightGoal").textContent = `${weightGoal} kg`;
			}

			function logWeight() {
				const today = new Date().toISOString().split("T")[0];
				const latestWeightEntry = MOCK_DATA.weightLog.length > 0 ? MOCK_DATA.weightLog[MOCK_DATA.weightLog.length - 1] : null;
                const currentWeightSuggest = latestWeightEntry ? latestWeightEntry.weight : (MOCK_DATA.profile.weight_kg || "");

				const weightStr = prompt(
					`Enter current weight (kg) for ${today}:`,
					currentWeightSuggest
				);
				const weight = parseFloat(weightStr);

				if (!isNaN(weight) && weight > 0) {
					const existingIndex = MOCK_DATA.weightLog.findIndex(
						(e) => e.date === today
					);
					if (existingIndex > -1) {
						// Update existing entry for today
						MOCK_DATA.weightLog[existingIndex].weight = weight;
					} else {
                        // Add new entry
						MOCK_DATA.weightLog.push({ date: today, weight: weight });
                        // Sort after adding
                        MOCK_DATA.weightLog.sort((a, b) => new Date(a.date) - new Date(b.date));
					}
                    // Also update profile weight
                    MOCK_DATA.profile.weight_kg = weight;
                    localStorage.setItem('userProfile', JSON.stringify(MOCK_DATA.profile));

					saveMockData(); // Save updated weight log
					updateWeightChart(); // Refresh chart
				} else if (weightStr !== null && weightStr !== "") { // Avoid alert if cancelled
					alert("Invalid weight entered. Please enter a positive number.");
				}
			}

			function loadAchievements() {
				const list = document.getElementById("achievementsList");
				const noAchievementsMsg =
					document.getElementById("noAchievements");
				if (!list || !noAchievementsMsg) return;

				list.innerHTML = "";
				if (MOCK_DATA.achievements.length === 0) {
					noAchievementsMsg.classList.remove("d-none");
				} else {
					noAchievementsMsg.classList.add("d-none");
					// Only show up to 2 achievements
					const limitedAchievements = MOCK_DATA.achievements.slice(0, 2);
					limitedAchievements.forEach((ach) => {
						const item = document.createElement("li");
						item.classList.add("achievement-item");
						// Get color from CSS variable name stored in mock data
						const iconColor = ach.color ? getCssVariable(ach.color) : getCssVariable('--primary-color');
						item.innerHTML = `
							<span class="achievement-icon" style="color: ${iconColor}"></span>
							<div class="achievement-details">
								<div class="achievement-name">${ach.name}</div>
								<div class="achievement-date">Achieved: ${ach.date}</div>
							</div>`;
						list.appendChild(item);
					});
				}
			}

			function navigateTo(url) {
				console.log("Navigating to:", url);
				if (url && url !== "#") {
					window.location.href = url;
				} else {
                    console.warn(`Navigation to ${url} not implemented or invalid.`);
				}
			}

			document.addEventListener("DOMContentLoaded", () => {
				// Ensure profile data is loaded before charts that might depend on it (like BMI)
				MOCK_DATA.profile = JSON.parse(
					localStorage.getItem("userProfile") || "{}"
				);
                MOCK_DATA.goals = JSON.parse(localStorage.getItem("userGoals") || "[]");
                MOCK_DATA.weightLog = JSON.parse(localStorage.getItem("weightLog") || "[]").sort((a, b) => new Date(a.date) - new Date(b.date)); // Load and sort weight log

				updateActivityChart();
				updateNutritionChart();
				updateWeightChart();
				loadAchievements();
			});
		</script>
	</body>
</html>
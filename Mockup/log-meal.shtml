<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>Log Meal - iPad View</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="shared-styles.css" />
		<style>
			.food-items-section {
				background-color: var(--surface-color);
				border-radius: var(--card-border-radius);
				padding: var(--content-padding);
				margin-bottom: 30px;
				box-shadow: 0 4px 12px var(--shadow-color);
				border: 1px solid var(--border-color); /* Use theme border */
			}
			/* Removed light mode specific border */

			.section-header {
				font-size: 18px;
				font-weight: 600;
				color: var(--text-primary);
				margin: 0 0 20px 0; /* Adjusted margin */
				padding-bottom: 15px;
				border-bottom: 1px solid var(--border-color); /* Use theme border */
				display: flex;
				align-items: center;
			}
			.section-header-icon {
				font-size: 20px;
				margin-right: 10px;
				color: var(--primary-color); /* Use theme primary color */
			}
			.food-item-list {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.food-item {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 15px 0;
				border-bottom: 1px solid var(--surface-secondary-color);
				font-size: 16px;
			}
			.food-item:last-child {
				border-bottom: none;
			}
			.food-item-info {
				flex-grow: 1;
				margin-right: 15px;
			}
			.food-item-name {
				color: var(--text-primary);
				font-weight: 500;
			}
			.food-item-details {
				color: var(--text-secondary);
				font-size: 14px;
				margin-top: 4px;
				display: block;
			}
			.remove-item-btn {
				color: var(--accent-red);
				background: none;
				border: none;
				font-size: 24px;
				line-height: 1;
				cursor: pointer;
				padding: 5px 8px;
				opacity: 0.7;
				transition: opacity 0.2s ease;
				flex-shrink: 0;
			}
			.remove-item-btn:hover {
				opacity: 1;
			}

			.add-item-area {
				padding: 20px 0;
				border-top: 1px solid var(--border-color);
				margin-top: 20px;
			}
			.add-item-area .input-row {
				margin-bottom: 15px;
			}
			.add-item-area .button {
				margin-top: 10px;
				width: 100%;
			}

			.summary-section {
				background-color: var(--surface-color);
				border-radius: var(--card-border-radius);
				padding: var(--content-padding);
				box-shadow: 0 4px 12px var(--shadow-color);
				margin-top: 30px;
				border: 1px solid var(--border-color); /* Use theme border */
			}
			/* Removed light mode specific border */

			.summary-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
				gap: 20px;
				text-align: center;
				padding-top: 10px;
			}
			.summary-item-value {
				font-size: 20px;
				font-weight: 600;
				color: var(--text-primary);
				margin-bottom: 4px;
			}
			.summary-item-label {
				font-size: 13px;
				color: var(--text-secondary);
				text-transform: uppercase;
				letter-spacing: 0.4px;
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<!-- Header -->
			<div class="header">
				<div class="header-spacer"></div>
				<span class="header-title">Log Meal</span>
				<button class="header-action-button" onclick="saveMeal()">
					Save Meal
				</button>
			</div>

			<!-- Main Scrollable Content Area -->
			<div class="main-content">
				<form id="log-meal-form">
					<!-- Date, Time, Meal Type Group -->
					<div class="input-group">
						<div class="input-row">
							<div>
								<label for="meal-date" class="form-label"
									>Date</label
								>
								<input
									type="date"
									id="meal-date"
									name="meal_date"
									class="form-input"
									required
								/>
							</div>
							<div>
								<label for="meal-time" class="form-label"
									>Time</label
								>
								<input
									type="time"
									id="meal-time"
									name="meal_time"
									class="form-input"
									required
								/>
							</div>
						</div>
						<div>
							<label for="meal-type" class="form-label"
								>Meal Type</label
							>
							<select
								id="meal-type"
								name="meal_type"
								class="form-select"
								required
							>
								<option value="breakfast">Breakfast</option>
								<option value="lunch">Lunch</option>
								<option value="dinner">Dinner</option>
								<option value="snack">Snack</option>
								<option value="other">Other</option>
							</select>
						</div>
					</div>
				</form>
				<!-- End of overall meal form -->

				<!-- Food Items Section -->
				<div class="food-items-section">
					<h3 class="section-header">
						<span class="section-header-icon"></span> Food Items
					</h3>
					<ul class="food-item-list" id="foodList">
						<!-- Example Items (can be removed or kept) -->
						<li
							class="food-item"
							data-calories="95"
							data-protein="0.5"
							data-carbs="25"
							data-fat="0.3"
							data-name="Apple"
							data-portion="1 medium"
						>
							<div class="food-item-info">
								<span class="food-item-name">Apple</span>
								<span class="food-item-details"
									>1 medium - 95 kcal</span
								>
							</div>
							<button
								class="remove-item-btn"
								onclick="removeItem(this)"
								title="Remove Item"
							>
								√ó
							</button>
						</li>
						<li
							class="food-item"
							data-calories="350"
							data-protein="30"
							data-carbs="10"
							data-fat="20"
							data-name="Grilled Chicken Salad"
							data-portion="1 serving"
						>
							<div class="food-item-info">
								<span class="food-item-name"
									>Grilled Chicken Salad</span
								>
								<span class="food-item-details"
									>1 serving - 350 kcal</span
								>
							</div>
							<button
								class="remove-item-btn"
								onclick="removeItem(this)"
								title="Remove Item"
							>
								√ó
							</button>
						</li>
						<!-- End Example Items -->
					</ul>

					<!-- Area to Add New Food Item -->
					<div class="add-item-area">
						<h4 style="margin-bottom: 15px; font-weight: 500">
							Add New Item
						</h4>
						<div class="input-row">
							<div>
								<label for="food-name" class="form-label"
									>Food Name</label
								>
								<input
									type="text"
									id="food-name"
									name="food_name_temp"
									class="form-input"
									placeholder="e.g., Banana"
								/>
							</div>
							<div>
								<label for="food-portion" class="form-label"
									>Portion / Amount</label
								>
								<input
									type="text"
									id="food-portion"
									name="food_portion_temp"
									class="form-input"
									placeholder="e.g., 1 medium, 100g"
								/>
							</div>
						</div>
						<div class="input-row">
							<div>
								<label for="food-calories" class="form-label"
									>Calories (kcal)</label
								>
								<input
									type="number"
									id="food-calories"
									name="food_calories_temp"
									class="form-input"
									placeholder="e.g., 105"
									min="0"
									step="1"
								/>
							</div>
							<div>
								<!-- Optional Macros -->
								<label for="food-protein" class="form-label"
									>Protein (g, Opt.)</label
								>
								<input
									type="number"
									id="food-protein"
									name="food_protein_temp"
									class="form-input"
									placeholder="e.g., 1.3"
									min="0"
									step="0.1"
								/>
							</div>
							<div>
								<label for="food-carbs" class="form-label"
									>Carbs (g, Opt.)</label
								>
								<input
									type="number"
									id="food-carbs"
									name="food_carbs_temp"
									class="form-input"
									placeholder="e.g., 27"
									min="0"
									step="0.1"
								/>
							</div>
							<div>
								<label for="food-fat" class="form-label"
									>Fat (g, Opt.)</label
								>
								<input
									type="number"
									id="food-fat"
									name="food_fat_temp"
									class="form-input"
									placeholder="e.g., 0.4"
									min="0"
									step="0.1"
								/>
							</div>
						</div>
						<button
							type="button"
							class="button button-secondary"
							onclick="addFoodItem()"
						>
							+ Add Item to Meal
						</button>
					</div>
				</div>

				<!-- Summary Section -->
				<div class="summary-section">
					<h3 class="section-header">
						<span class="section-header-icon"></span> Meal Summary
					</h3>
					<div class="summary-grid" id="summaryGrid">
						<div class="summary-item">
							<div
								class="summary-item-value"
								data-summary="calories"
							>
								0
							</div>
							<div class="summary-item-label">Calories</div>
						</div>
						<div class="summary-item">
							<div
								class="summary-item-value"
								data-summary="protein"
							>
								0g
							</div>
							<div class="summary-item-label">Protein</div>
						</div>
						<div class="summary-item">
							<div
								class="summary-item-value"
								data-summary="carbs"
							>
								0g
							</div>
							<div class="summary-item-label">Carbs</div>
						</div>
						<div class="summary-item">
							<div class="summary-item-value" data-summary="fat">
								0g
							</div>
							<div class="summary-item-label">Fat</div>
						</div>
					</div>
				</div>
			</div>
			<!-- End Main Content -->

			<!-- Bottom Navigation Bar -->
			<nav class="bottom-nav" id="bottomNav">
				<button
					onclick="window.location.href='todo.shtml'"
					class="nav-item"
					data-page="home"
				>
					<span class="nav-icon">üè†</span>
					<span class="nav-label">Home</span>
				</button>
				<button
					onclick="window.location.href='progress.shtml'"
					class="nav-item"
					data-page="progress"
				>
					<span class="nav-icon">üìä</span>
					<span class="nav-label">Progress</span>
				</button>
				<button
					onclick="window.location.href='log-meal.shtml'"
					class="nav-item active"
					data-page="log-meal"
				>
					<span class="nav-icon">üçî</span>
					<span class="nav-label">Log Meal</span>
				</button>
				<button
					onclick="window.location.href='log-exercise.shtml'"
					class="nav-item"
					data-page="log-exercise"
				>
					<span class="nav-icon">üèÉ</span>
					<span class="nav-label">Log Exercise</span>
				</button>
				<button
					onclick="window.location.href='profile.shtml'"
					class="nav-item"
					data-page="profile"
				>
					<span class="nav-icon">üë§</span>
					<span class="nav-label">Profile</span>
				</button>
			</nav>
		</div>
		<!-- End ipad Container -->

		<script>
			function getISODateString(date) {
				return date.toISOString().split("T")[0];
			}

			function saveMeal() {
				const foodItems = document.querySelectorAll(
					"#foodList .food-item"
				);
				if (foodItems.length === 0) {
					alert("Please add at least one food item before saving.");
					return;
				}

				const mealDateInput = document.getElementById("meal-date");
				const mealTimeInput = document.getElementById("meal-time");
				const mealTypeInput = document.getElementById("meal-type");

				const mealDate = mealDateInput.value;
				const mealTime = mealTimeInput.value;
				const mealType = mealTypeInput.value;

				if (!mealDate || !mealTime || !mealType) {
					alert(
						"Please ensure Date, Time, and Meal Type are selected."
					);
					return;
				}

				// Get summary values directly from the display
				const summaryCalories =
					parseFloat(
						document.querySelector('[data-summary="calories"]')
							.textContent
					) || 0;
				const summaryProtein =
					parseFloat(
						document.querySelector('[data-summary="protein"]')
							.textContent
					) || 0;
				const summaryCarbs =
					parseFloat(
						document.querySelector('[data-summary="carbs"]')
							.textContent
					) || 0;
				const summaryFat =
					parseFloat(
						document.querySelector('[data-summary="fat"]')
							.textContent
					) || 0;

				const mealData = {
					id: Date.now(), // Generate ID on save
					date: mealDate,
					time: mealTime,
					type: mealType,
					items: [],
					summary: {
						calories: summaryCalories,
						protein: summaryProtein,
						carbs: summaryCarbs,
						fat: summaryFat,
					},
				};

				foodItems.forEach((item) => {
					// Retrieve data from data-* attributes
					mealData.items.push({
						name:
							item.dataset.name ||
							item.querySelector(".food-item-name").textContent, // Prefer data attribute
						portion: item.dataset.portion || "",
						details:
							item.querySelector(".food-item-details")
								.textContent, // Keep original detail string
						calories: parseFloat(item.dataset.calories) || 0,
						protein: parseFloat(item.dataset.protein) || 0,
						carbs: parseFloat(item.dataset.carbs) || 0,
						fat: parseFloat(item.dataset.fat) || 0,
					});
				});

				console.log("Meal Data to Save:", mealData);

				// Simulate saving to localStorage
				try {
					let history = JSON.parse(
						localStorage.getItem("mealHistory") || "[]"
					);
					history.push(mealData);
					localStorage.setItem(
						"mealHistory",
						JSON.stringify(history)
					);

					// Update daily log totals for the dashboard
					const dateStr = mealData.date; // Should be YYYY-MM-DD
					let dailyLog = JSON.parse(
						localStorage.getItem(`dailyLog_${dateStr}`) || "{}"
					);
					dailyLog.kcal =
						(dailyLog.kcal || 0) + mealData.summary.calories;
					// Optionally add macros to daily log if needed elsewhere
					localStorage.setItem(
						`dailyLog_${dateStr}`,
						JSON.stringify(dailyLog)
					);

					alert("Meal Saved!");
					// Clear the form and list
					document.getElementById("foodList").innerHTML = "";
					document.getElementById("log-meal-form").reset();
					document.getElementById("food-name").value = "";
					document.getElementById("food-portion").value = "";
					document.getElementById("food-calories").value = "";
					document.getElementById("food-protein").value = "";
					document.getElementById("food-carbs").value = "";
					document.getElementById("food-fat").value = "";

					updateSummary(); // Reset summary display to 0
					setDefaultDateTime(); // Reset date/time inputs to current
				} catch (e) {
					console.error("Error saving meal:", e);
					alert("Error saving meal. Check console for details.");
				}
			}

			function addFoodItem() {
				const nameInput = document.getElementById("food-name");
				const portionInput = document.getElementById("food-portion");
				const caloriesInput = document.getElementById("food-calories");
				const proteinInput = document.getElementById("food-protein");
				const carbsInput = document.getElementById("food-carbs");
				const fatInput = document.getElementById("food-fat");

				const name = nameInput.value.trim();
				const portion = portionInput.value.trim();
				const calories = parseFloat(caloriesInput.value) || 0;
				const protein = parseFloat(proteinInput.value) || 0;
				const carbs = parseFloat(carbsInput.value) || 0;
				const fat = parseFloat(fatInput.value) || 0;

				if (!name) {
					alert("Please enter a Food Name.");
					nameInput.focus();
					return;
				}
				if (calories <= 0 && protein <= 0 && carbs <= 0 && fat <= 0) {
					// Allow adding if macros are provided even without calories explicitly
					if (
						confirm(
							"Calories not entered. Add item based on macros only?"
						)
					) {
						// Calculate calories from macros (standard approximation)
						// calories = (protein * 4) + (carbs * 4) + (fat * 9);
						// For simplicity, we'll just require calories for now
						alert(
							"Please enter the Calories (kcal) for the food item."
						);
						caloriesInput.focus();
						return;
					} else {
						return;
					}
				}
				if (calories <= 0) {
					alert(
						"Please enter the Calories (kcal) for the food item."
					);
					caloriesInput.focus();
					return;
				}

				const list = document.getElementById("foodList");
				if (list) {
					const newItem = document.createElement("li");
					newItem.classList.add("food-item");
					// Store all values in data attributes for reliable retrieval
					newItem.dataset.name = name;
					newItem.dataset.portion = portion;
					newItem.dataset.calories = calories;
					newItem.dataset.protein = protein;
					newItem.dataset.carbs = carbs;
					newItem.dataset.fat = fat;

					// Construct details string for display
					let detailsStr = `${
						portion ? portion + " - " : ""
					}${calories} kcal`;

					newItem.innerHTML = `
                        <div class="food-item-info">
                            <span class="food-item-name">${name}</span>
                            <span class="food-item-details">${detailsStr}</span>
                        </div>
                        <button class="remove-item-btn" onclick="removeItem(this)" title="Remove Item">√ó</button>`;
					list.appendChild(newItem);

					// Clear input fields
					nameInput.value = "";
					portionInput.value = "";
					caloriesInput.value = "";
					proteinInput.value = "";
					carbsInput.value = "";
					fatInput.value = "";

					updateSummary();
					nameInput.focus(); // Focus back on name for next item
				}
			}

			function removeItem(button) {
				const listItem = button.closest(".food-item");
				if (listItem) {
					listItem.remove();
					updateSummary();
				}
			}

			function updateSummary() {
				const items = document.querySelectorAll("#foodList .food-item");
				let totalCalories = 0,
					totalProtein = 0,
					totalCarbs = 0,
					totalFat = 0;

				items.forEach((item) => {
					// Read reliably from data attributes
					totalCalories += parseFloat(item.dataset.calories) || 0;
					totalProtein += parseFloat(item.dataset.protein) || 0;
					totalCarbs += parseFloat(item.dataset.carbs) || 0;
					totalFat += parseFloat(item.dataset.fat) || 0;
				});

				// Update the summary display
				document.querySelector(
					'[data-summary="calories"]'
				).textContent = Math.round(totalCalories);
				document.querySelector('[data-summary="protein"]').textContent =
					Math.round(totalProtein * 10) / 10 + "g"; // Keep one decimal place
				document.querySelector('[data-summary="carbs"]').textContent =
					Math.round(totalCarbs * 10) / 10 + "g";
				document.querySelector('[data-summary="fat"]').textContent =
					Math.round(totalFat * 10) / 10 + "g";
			}

			function setDefaultDateTime() {
				const dateInput = document.getElementById("meal-date");
				const timeInput = document.getElementById("meal-time");
				const now = new Date();

				if (!dateInput.value) {
					// Set to today's date in YYYY-MM-DD format
					dateInput.value = getISODateString(now);
				}
				if (!timeInput.value) {
					const hh = String(now.getHours()).padStart(2, "0");
					const mm = String(now.getMinutes()).padStart(2, "0");
					timeInput.value = `${hh}:${mm}`;
				}
			}

			document.addEventListener("DOMContentLoaded", () => {
				setDefaultDateTime();
				updateSummary(); // Initial summary calculation (for example items)
			});
		</script>
	</body>
</html>

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>Log Meal - iPad View</title>
		<!-- Updated Title -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<style>
			/* --- Root Variables (Consistent - Copied from log-exercise) --- */
			:root {
				--primary-color: #007aff;
				--primary-light: #e6f2ff;
				--accent-purple: #af52de;
				--accent-teal: #5ac8fa;
				--accent-orange: #ff9500;
				--accent-green: #34c759;
				--accent-red: #ff3b30;
				--background-color: #f2f2f7;
				--surface-color: #ffffff;
				--surface-secondary-color: #e5e5ea;
				--bottom-nav-background: rgba(248, 248, 248, 0.92);
				--text-primary: #000000;
				--text-secondary: #3c3c43;
				--text-tertiary: #8e8e93;
				--text-link: var(--primary-color);
				--text-on-primary: #ffffff;
				--border-color: #d1d1d6;
				--shadow-color: rgba(0, 0, 0, 0.05);
				--shadow-strong-color: rgba(0, 0, 0, 0.1);
				--nav-height: 70px;
				--content-padding: 24px;
				--card-border-radius: 16px;
			}
			body,
			html {
				margin: 0;
				padding: 0;
				font-family: "Inter", sans-serif;
				height: 100%;
				background-color: #dcdce1;
				-webkit-font-smoothing: antialiased;
				-moz-osx-font-smoothing: grayscale;
			}
			* {
				box-sizing: border-box;
			}
			/* --- iPad Container Simulation --- */
			.ipad-container {
				width: 768px;
				height: 1024px;
				border: 1px solid var(--border-color);
				margin: 40px auto;
				background-color: var(--background-color);
				display: flex;
				flex-direction: column;
				position: relative;
				overflow: hidden;
				border-radius: 20px;
				box-shadow: 0 15px 40px var(--shadow-strong-color);
			}

			/* --- Header (Consistent) --- */
			.header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 20px var(--content-padding) 15px var(--content-padding);
				flex-shrink: 0;
				position: relative;
				z-index: 10;
				background-color: var(--surface-color);
				border-bottom: 1px solid var(--border-color);
			}
			.header-title {
				font-size: 20px;
				font-weight: 600;
				color: var(--text-primary);
			}
			.action-button {
				font-size: 17px;
				font-weight: 600;
				color: var(--text-link);
				cursor: pointer;
				background: none;
				border: none;
				padding: 8px 10px;
			}
			.action-button:disabled {
				color: var(--text-tertiary);
				cursor: default;
			}

			/* --- Main Content (Adjusted Padding) --- */
			.main-content {
				flex-grow: 1;
				overflow-y: auto;
				padding: var(--content-padding);
				padding-top: 30px;
				padding-bottom: calc(
					var(--nav-height) + var(--content-padding)
				);
				scrollbar-width: thin;
				scrollbar-color: var(--border-color) transparent;
			}
			.main-content::-webkit-scrollbar {
				width: 6px;
			}
			.main-content::-webkit-scrollbar-thumb {
				background-color: var(--border-color);
				border-radius: 3px;
			}
			.main-content::-webkit-scrollbar-track {
				background: transparent;
			}

			/* --- Form Styling (Modernized & Spaced) --- */
			.input-group {
				margin-bottom: 30px;
			}
			.input-row {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 20px;
				margin-bottom: 20px;
			}
			.input-row > div {
				/* No flex needed */
			}

			.form-label {
				display: flex;
				align-items: center;
				font-size: 15px;
				font-weight: 500;
				color: var(--text-secondary);
				margin-bottom: 10px;
			}
			.form-label-icon {
				font-size: 18px;
				margin-right: 8px;
				color: var(--text-tertiary);
			}
			.form-input,
			.form-select {
				width: 100%;
				padding: 14px 16px;
				border: 1px solid var(--border-color);
				border-radius: var(--card-border-radius);
				font-size: 17px;
				color: var(--text-primary);
				background-color: var(--surface-color);
				transition: border-color 0.2s ease, box-shadow 0.2s ease;
				box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);
			}
			.form-select {
				appearance: none;
				-webkit-appearance: none;
				background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%233C3C43'%3E%3Cpath fill-rule='evenodd' d='M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06z'/%3E%3C/svg%3E");
				background-repeat: no-repeat;
				background-position: right 16px center;
				background-size: 16px 16px;
				padding-right: 40px; /* Space for arrow */
				cursor: pointer;
			}
			.form-input:focus,
			.form-select:focus {
				outline: none;
				border-color: var(--primary-color);
				box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.2);
			}

			/* --- Food Item List Styling (Card Style) --- */
			.food-items-section {
				background-color: var(--surface-color);
				border-radius: var(--card-border-radius);
				padding: var(--content-padding);
				margin-bottom: 30px;
				box-shadow: 0 4px 12px var(--shadow-color);
			}
			.section-header {
				font-size: 18px; /* Larger section header */
				font-weight: 600;
				color: var(--text-primary);
				margin-bottom: 20px;
				display: flex;
				align-items: center;
				padding-bottom: 15px;
				border-bottom: 1px solid var(--border-color);
			}
			.section-header-icon {
				font-size: 20px;
				margin-right: 10px;
				color: var(--primary-color);
			}

			.food-item-list {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.food-item {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 15px 0; /* Increased padding */
				border-bottom: 1px solid var(--background-color);
				font-size: 16px; /* Slightly larger item text */
			}
			.food-item:last-child {
				border-bottom: none;
			}
			.food-item-name {
				color: var(--text-primary);
				font-weight: 500;
			}
			.food-item-details {
				color: var(--text-secondary);
				font-size: 14px; /* Slightly larger detail text */
				margin-top: 4px;
				display: block;
			}
			.food-item-info {
				flex-grow: 1;
				margin-right: 15px;
			}
			.remove-item-btn {
				color: var(--accent-red);
				background: none;
				border: none;
				font-size: 24px; /* Larger remove icon */
				line-height: 1;
				cursor: pointer;
				padding: 5px 8px;
				opacity: 0.7;
				transition: opacity 0.2s ease;
				flex-shrink: 0;
			}
			.remove-item-btn:hover {
				opacity: 1;
			}

			.add-item-button {
				display: block;
				margin-top: 20px;
				padding: 12px 0; /* Increased padding */
				color: var(--text-link);
				font-weight: 500;
				font-size: 16px; /* Larger button text */
				cursor: pointer;
				text-align: center;
				background: none;
				border: none;
				width: 100%;
				border-top: 1px solid var(--surface-secondary-color); /* Use secondary surface color */
				padding-top: 20px;
				transition: background-color 0.2s ease;
				border-radius: 0 0 var(--card-border-radius)
					var(--card-border-radius); /* Round bottom corners if needed */
			}
			.add-item-button:hover {
				background-color: var(--primary-light);
			}

			/* --- Summary Section (Card Style) --- */
			.summary-section {
				background-color: var(--surface-color);
				border-radius: var(--card-border-radius);
				padding: var(--content-padding);
				box-shadow: 0 4px 12px var(--shadow-color);
				margin-top: 30px;
			}
			.summary-grid {
				display: grid;
				grid-template-columns: repeat(
					auto-fit,
					minmax(120px, 1fr)
				); /* More flexible columns */
				gap: 20px; /* More gap */
				text-align: center;
				padding-top: 10px;
			}
			.summary-item-value {
				font-size: 20px; /* Larger value */
				font-weight: 600;
				color: var(--text-primary);
				margin-bottom: 4px;
			}
			.summary-item-label {
				font-size: 13px; /* Larger label */
				color: var(--text-secondary);
				text-transform: uppercase;
				letter-spacing: 0.4px;
			}

			/* --- Bottom Navigation Bar (Consistent - Copied from log-exercise) --- */
			.bottom-nav {
				position: absolute;
				bottom: 0;
				left: 0;
				right: 0;
				height: var(--nav-height);
				background-color: var(--bottom-nav-background);
				backdrop-filter: blur(15px);
				-webkit-backdrop-filter: blur(15px);
				border-top: 0.5px solid var(--border-color);
				display: flex;
				justify-content: space-around;
				align-items: stretch;
				z-index: 100;
				padding: 0 15px;
			}
			.nav-item {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				text-decoration: none;
				color: var(--text-tertiary);
				font-size: 11px;
				font-weight: 500;
				flex-grow: 1;
				text-align: center;
				transition: color 0.2s ease;
				padding: 8px 0 6px 0;
				position: relative;
				cursor: pointer;
			}
			.nav-icon {
				font-size: 26px;
				margin-bottom: 4px;
				line-height: 1;
			}
			.nav-item:hover {
				color: var(--text-secondary);
			}
			.nav-item.active {
				color: var(--primary-color);
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<!-- Changed class name -->
			<!-- Header -->
			<div class="header">
				<span class="header-title">Log Meal</span>
				<button class="action-button" onclick="saveMeal()">Save</button>
			</div>

			<!-- Main Scrollable Content Area -->
			<div class="main-content">
				<!-- Date, Time, Meal Type Group -->
				<div class="input-group">
					<!-- Row for Date and Time -->
					<div class="input-row">
						<div>
							<label for="meal-date" class="form-label">
								<span class="form-label-icon">📅</span>Date
							</label>
							<input type="date" id="meal-date" name="meal-date"
							class="form-input" value="<!--#echo var="DATE_LOCAL"
							/>
						</div>
						<div>
							<label for="meal-time" class="form-label">
								<span class="form-label-icon">⏰</span>Time
							</label>
							<input type="time" id="meal-time" name="meal-time"
							class="form-input" value="<!--#echo var="TIME_LOCAL" -->" />
						</div>
					</div>
					<!-- Meal Type on its own -->
					<div>
						<label for="meal-type" class="form-label">
							<span class="form-label-icon">🍳</span>Meal Type
						</label>
						<select
							id="meal-type"
							name="meal-type"
							class="form-select"
						>
							<option value="breakfast">Breakfast</option>
							<option value="lunch">Lunch</option>
							<option value="dinner">Dinner</option>
							<option value="snack">Snack</option>
							<option value="other">Other</option>
						</select>
					</div>
				</div>

				<!-- Food Items Section -->
				<div class="food-items-section">
					<h3 class="section-header">
						<span class="section-header-icon">🍎</span> Food Items
					</h3>
					<ul class="food-item-list" id="foodList">
						<!-- Example Item 1 -->
						<li class="food-item">
							<div class="food-item-info">
								<span class="food-item-name">Apple</span>
								<span class="food-item-details"
									>1 medium (approx. 95 kcal)</span
								>
							</div>
							<button
								class="remove-item-btn"
								onclick="removeItem(this)"
								title="Remove Item"
							>
								×
								<!-- Use HTML entity -->
							</button>
						</li>
						<!-- Example Item 2 -->
						<li class="food-item">
							<div class="food-item-info">
								<span class="food-item-name"
									>Grilled Chicken Salad</span
								>
								<span class="food-item-details"
									>1 serving, olive oil dressing (approx. 350
									kcal)</span
								>
							</div>
							<button
								class="remove-item-btn"
								onclick="removeItem(this)"
								title="Remove Item"
							>
								×
							</button>
						</li>
						<!-- Example Item 3 -->
						<li class="food-item">
							<div class="food-item-info">
								<span class="food-item-name">Greek Yogurt</span>
								<span class="food-item-details"
									>1 cup (approx. 130 kcal)</span
								>
							</div>
							<button
								class="remove-item-btn"
								onclick="removeItem(this)"
								title="Remove Item"
							>
								×
							</button>
						</li>
						<!-- New items added by JS will appear here -->
					</ul>
					<button class="add-item-button" onclick="addFoodItem()">
						+ Add Food Item / Search Database
					</button>
				</div>

				<!-- Summary Section -->
				<div class="summary-section">
					<h3 class="section-header">
						<span class="section-header-icon">📊</span> Meal Summary
						(Estimated)
					</h3>
					<div class="summary-grid" id="summaryGrid">
						<!-- Values updated by JS -->
						<div class="summary-item">
							<div
								class="summary-item-value"
								data-summary="calories"
							>
								575
							</div>
							<div class="summary-item-label">Calories</div>
						</div>
						<div class="summary-item">
							<div
								class="summary-item-value"
								data-summary="protein"
							>
								45g
							</div>
							<div class="summary-item-label">Protein</div>
						</div>
						<div class="summary-item">
							<div
								class="summary-item-value"
								data-summary="carbs"
							>
								55g
							</div>
							<div class="summary-item-label">Carbs</div>
						</div>
						<div class="summary-item">
							<div class="summary-item-value" data-summary="fat">
								20g
							</div>
							<div class="summary-item-label">Fat</div>
						</div>
					</div>
				</div>
			</div>
			<!-- End Main Content -->

			<!-- Bottom Navigation Bar (UPDATED) -->
			<nav class="bottom-nav" id="bottomNav">
				<a href="todo.shtml" class="nav-item" data-page="home">
					<span class="nav-icon">🏠</span>
					<span class="nav-label">Home</span>
				</a>
				<a href="progress.shtml" class="nav-item" data-page="progress">
					<span class="nav-icon">📊</span>
					<span class="nav-label">Progress</span>
				</a>
				<a
					href="log-meal.shtml"
					class="nav-item active"
					data-page="log-meal"
				>
					<!-- Active & Link -->
					<span class="nav-icon">🍔</span>
					<span class="nav-label">Log Meal</span>
				</a>
				<a
					href="log-exercise.shtml"
					class="nav-item"
					data-page="log-exercise"
				>
					<span class="nav-icon">🏃</span>
					<span class="nav-label">Log Exercise</span>
				</a>
				<a href="profile.shtml" class="nav-item" data-page="profile">
					<span class="nav-icon">👤</span>
					<span class="nav-label">Profile</span>
				</a>
			</nav>
		</div>
		<!-- End ipad Container -->

		<script>
			// --- Mock Data for Summary ---
			const mockFoodDb = {
				Apple: { calories: 95, protein: 0.5, carbs: 25, fat: 0.3 },
				"Grilled Chicken Salad": {
					calories: 350,
					protein: 30,
					carbs: 10,
					fat: 20,
				},
				"Greek Yogurt": {
					calories: 130,
					protein: 20,
					carbs: 6,
					fat: 2,
				},
				"New Item": { calories: 150, protein: 5, carbs: 20, fat: 5 }, // Example for added item
			};

			function saveMeal() {
				const foodItems = document.querySelectorAll(
					"#foodList .food-item"
				);
				if (foodItems.length === 0) {
					alert("Please add at least one food item before saving.");
					return;
				}
				alert("Meal Saved! (Implementation Needed)");
				// Add actual data saving logic here
			}

			function addFoodItem() {
				// In a real app, this would open a search modal or detailed entry form.
				// For this example, we'll just add a placeholder item.
				const list = document.getElementById("foodList");
				if (list) {
					const newItem = document.createElement("li");
					newItem.classList.add("food-item");
					const foodName = "New Item"; // Simulate adding a known item for summary demo
					const details = mockFoodDb[foodName] || {
						calories: 0,
						protein: 0,
						carbs: 0,
						fat: 0,
					};
					newItem.innerHTML = `
                        <div class="food-item-info">
                            <span class="food-item-name">${foodName}</span>
                            <span class="food-item-details">Added manually (approx. ${details.calories} kcal)</span>
                        </div>
                        <button class="remove-item-btn" onclick="removeItem(this)" title="Remove Item">×</button>`;
					list.appendChild(newItem);
					updateSummary(); // Update totals when item is added
				}
			}

			function removeItem(button) {
				const listItem = button.closest(".food-item");
				if (listItem) {
					listItem.remove();
					updateSummary(); // Update totals when item is removed
				}
			}

			function updateSummary() {
				const items = document.querySelectorAll("#foodList .food-item");
				let totalCalories = 0,
					totalProtein = 0,
					totalCarbs = 0,
					totalFat = 0;

				items.forEach((item) => {
					const nameElement = item.querySelector(".food-item-name");
					if (nameElement) {
						const foodName = nameElement.textContent.trim();
						const foodData = mockFoodDb[foodName]; // Get data from our mock DB
						if (foodData) {
							totalCalories += foodData.calories;
							totalProtein += foodData.protein;
							totalCarbs += foodData.carbs;
							totalFat += foodData.fat;
						}
					}
				});

				// Update the summary display
				document.querySelector(
					'[data-summary="calories"]'
				).textContent = Math.round(totalCalories);
				document.querySelector('[data-summary="protein"]').textContent =
					Math.round(totalProtein) + "g";
				document.querySelector('[data-summary="carbs"]').textContent =
					Math.round(totalCarbs) + "g";
				document.querySelector('[data-summary="fat"]').textContent =
					Math.round(totalFat) + "g";
			}

			document.addEventListener("DOMContentLoaded", () => {
				// Set default date/time if SSI fails
				const dateInput = document.getElementById("meal-date");
				const timeInput = document.getElementById("meal-time");
				if (!dateInput.value) {
					const today = new Date();
					const yyyy = today.getFullYear();
					const mm = String(today.getMonth() + 1).padStart(2, "0");
					const dd = String(today.getDate()).padStart(2, "0");
					dateInput.value = `${yyyy}-${mm}-${dd}`;
				}
				if (!timeInput.value) {
					const now = new Date();
					const hh = String(now.getHours()).padStart(2, "0");
					const mm = String(now.getMinutes()).padStart(2, "0");
					timeInput.value = `${hh}:${mm}`;
				}

				// Initial summary calculation based on pre-loaded items
				updateSummary();
			});
		</script>
	</body>
</html>

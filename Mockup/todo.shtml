<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>Health Dashboard - iPad View</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="shared-styles.css" />
		<style>
			.greeting {
				font-size: 28px;
				font-weight: 700;
				color: var(--text-primary);
				margin: 15px 0 25px 0;
			}
			.time-filters {
				display: flex;
				gap: 12px;
				margin-bottom: 30px;
			}
			.filter-btn {
				padding: 9px 20px;
				border: 1px solid var(--border-color);
				border-radius: 25px;
				font-size: 14px;
				font-weight: 600;
				color: var(--text-link);
				background-color: var(--surface-color);
				cursor: pointer;
				transition: all 0.2s ease;
				box-shadow: 0 2px 4px var(--shadow-color);
			}
			.filter-btn:hover {
				background-color: var(--primary-light);
				border-color: color-mix(
					in srgb,
					var(--primary-color) 20%,
					transparent
				);
				transform: translateY(-1px);
			}
			.filter-btn.active {
				background-color: var(--primary-color);
				color: var(--text-on-primary);
				border-color: var(--primary-color);
				box-shadow: 0 3px 6px rgba(0, 95, 172, 0.25);
				transform: translateY(0);
			}
			.stats-grid {
				display: grid;
				grid-template-columns: repeat(3, 1fr);
				gap: 18px;
				margin-top: 25px;
			}
			.stat-card {
				padding: 18px;
				margin-bottom: 0;
				display: flex;
				flex-direction: column;
				align-items: flex-start;
				min-height: 150px;
			}
			.stat-card .card-header {
				margin-bottom: 12px;
				border-bottom: none;
				padding-bottom: 0;
			}
			.stat-card.clickable::after {
				content: "‚ùØ";
			}
			.stat-card .card-body {
				flex-grow: 1;
				width: 100%;
				display: flex;
				flex-direction: column;
				justify-content: flex-start;
				align-items: flex-start;
				padding-top: 0px;
				margin-top: auto;
			}
			.stat-value {
				font-size: 24px;
				font-weight: 600;
				color: var(--text-primary);
				line-height: 1.2;
			}
			.stat-unit,
			.stat-label {
				font-size: 12px;
				color: var(--text-secondary);
				font-weight: 500;
				line-height: 1.4;
			}
			.stat-unit {
				margin-left: 3px;
			}
			.stat-label {
				margin-top: 4px;
			}
			.stat-progress-bar {
				width: 100%;
				height: 8px;
				background-color: var(--chart-track-color);
				border-radius: 4px;
				overflow: hidden;
				margin-top: 12px;
			}
			.stat-progress-bar-fill {
				height: 100%;
				background-color: var(--primary-color);
				border-radius: 4px;
				width: 0%;
				transition: width 0.5s ease;
			}
			.steps-card .card-header-icon,
			.water-card .card-header-icon {
				color: var(--accent-teal);
			}
			.steps-card .stat-progress-bar-fill,
			.water-card .stat-progress-bar-fill {
				background-color: var(--accent-teal);
			}
			.exercise-card .card-header-icon {
				color: var(--primary-color);
			}
			.exercise-card .stat-progress-bar-fill {
				background-color: var(--primary-color);
			}
			.kcal-card .card-header-icon {
				color: var(--accent-red);
			}
			.kcal-card .stat-progress-bar-fill {
				background-color: var(--accent-red);
			}
			.goals-card .card-header-icon {
				color: var(--accent-green);
			}
			.goals-card .stat-progress-bar-fill {
				background-color: var(--accent-green);
			}
			.goals-checklist-section {
				margin-top: 30px;
			}
			.goals-checklist {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.goals-checklist-item {
				display: flex;
				align-items: center;
				padding: 12px 0;
				border-bottom: 1px solid var(--surface-secondary-color);
			}
			.goals-checklist-item:last-child {
				border-bottom: none;
			}
			.goals-checklist-item input[type="checkbox"] {
				width: 20px;
				height: 20px;
				margin-right: 15px;
				accent-color: var(--primary-color);
				cursor: pointer;
				flex-shrink: 0;
			}
			.goals-checklist-item label {
				flex-grow: 1;
				cursor: pointer;
			}
			.goals-checklist-item .goal-name {
				font-weight: 500;
			}
			.goals-checklist-item .goal-details {
				font-size: 13px;
				color: var(--text-secondary);
				margin-top: 3px;
			}
			.goals-checklist-item.completed label {
				text-decoration: line-through;
				color: var(--text-tertiary);
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<div class="header">
				<div class="header-logo">Wellness Hub</div>
				<div class="header-actions">
					<button
						class="action-icon notification-icon"
						title="Notifications"
						onclick="showNotifications()"
					>
						<span class="visually-hidden">Notifications</span>
					</button>
				</div>
			</div>

			<div class="main-content">
				<h1 class="greeting" id="userGreeting">Hello,</h1>

				<div class="time-filters" id="timeFilters">
					<button class="filter-btn active" data-filter="daily">
						Today
					</button>
					<button class="filter-btn" data-filter="weekly">
						This Week
					</button>
					<button class="filter-btn" data-filter="monthly">
						This Month
					</button>
				</div>

				<div class="stats-grid">
					<div
						class="card stat-card steps-card clickable"
						onclick="navigateTo('progress.shtml#activity')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon"></span> Steps
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value" id="statSteps">0</div>
							<div class="stat-label" id="statStepsLabel">
								Goal: <span id="goalSteps">10,000</span> steps
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="stepsProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card exercise-card clickable"
						onclick="navigateTo('progress.shtml#activity')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon"></span>
								Exercise
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statExercise">0</span
								><span class="stat-unit">min</span>
							</div>
							<div class="stat-label" id="statExerciseLabel">
								Goal: <span id="goalExercise">60</span> min
								active
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="exerciseProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card kcal-card clickable"
						onclick="navigateTo('progress.shtml#nutrition')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon"></span> Kcal
								Consumed
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statKcal">0</span
								><span class="stat-unit">kcal</span>
							</div>
							<div class="stat-label" id="statKcalLabel">
								Goal: <span id="goalKcal">2000</span> kcal
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="kcalProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card water-card clickable"
						onclick="navigateTo('progress.shtml#water')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon"></span> Water
								Intake
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statWater">0.0</span
								><span class="stat-unit">L</span>
							</div>
							<div class="stat-label" id="statWaterLabel">
								Goal: <span id="goalWater">2.0</span> L
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="waterProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card goals-card clickable"
						onclick="navigateTo('profile.shtml#goals')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon"></span> Goals
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value" id="statGoals">0 / 0</div>
							<div class="stat-label" id="statGoalsLabel">
								Active Goals Met
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="goalsProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
				</div>

				<section class="goals-checklist-section card">
					<h2
						class="section-header"
						style="
							border: none;
							margin-bottom: 15px;
							font-size: 18px;
							padding-bottom: 0;
						"
					>
						Goals Checklist (<span id="checklistPeriod">Today</span
						>)
					</h2>
					<ul class="goals-checklist" id="goalsChecklist"></ul>
					<p
						id="noGoalsToday"
						class="text-center text-tertiary d-none mt-2"
					>
						No active goals for this period.
					</p>
				</section>
			</div>

			<nav class="bottom-nav" id="bottomNav">
				<button
					onclick="window.location.href='todo.shtml'"
					class="nav-item active"
					data-page="home"
				>
					<span class="nav-icon">üè†</span>
					<span class="nav-label">Home</span>
				</button>
				<button
					onclick="window.location.href='progress.shtml'"
					class="nav-item"
					data-page="progress"
				>
					<span class="nav-icon">üìä</span>
					<span class="nav-label">Progress</span>
				</button>
				<button
					onclick="window.location.href='log-meal.shtml'"
					class="nav-item"
					data-page="log-meal"
				>
					<span class="nav-icon">üçî</span>
					<span class="nav-label">Log Meal</span>
				</button>
				<button
					onclick="window.location.href='log-exercise.shtml'"
					class="nav-item"
					data-page="log-exercise"
				>
					<span class="nav-icon">üèÉ</span>
					<span class="nav-label">Log Exercise</span>
				</button>
				<button
					onclick="window.location.href='profile.shtml'"
					class="nav-item"
					data-page="profile"
				>
					<span class="nav-icon">üë§</span>
					<span class="nav-label">Profile</span>
				</button>
			</nav>
		</div>

		<script>
			let currentFilter = "daily";
			let userGoals = [];
			let aggregatedData = {};

			function getISODateString(date) {
				return date.toISOString().split("T")[0];
			}

			function getStartDateForPeriod(period, endDate) {
				let startDate = new Date(endDate);
				switch (period) {
					case "weekly":
						startDate.setDate(startDate.getDate() - 6);
						break;
					case "monthly":
						startDate.setDate(1);
						break;
					case "daily":
					default:
						break;
				}
				return startDate;
			}

			function loadDashboardData(filterPeriod = "daily") {
				currentFilter = filterPeriod;
				console.log(`Loading data for filter: ${filterPeriod}`);

				const userProfile = JSON.parse(
					localStorage.getItem("userProfile") || "{}"
				);
				userGoals = JSON.parse(
					localStorage.getItem("userGoals") || "[]"
				);
				document.getElementById("userGreeting").textContent = `Hello, ${
					userProfile.username || "User"
				}!`;

				const periodMap = {
					daily: "Today",
					weekly: "This Week",
					monthly: "This Month",
				};
				document.getElementById("checklistPeriod").textContent =
					periodMap[filterPeriod] || "Today";

				aggregatedData = {
					steps: 0,
					exercise: 0,
					kcal: 0,
					water: 0,
					daysInRange: 0,
					goalsMetCount: 0,
					totalActiveGoals: 0,
				};

				const endDate = new Date();
				const startDate = getStartDateForPeriod(filterPeriod, endDate);
				const endStr = getISODateString(endDate);
				const startStr = getISODateString(startDate);

				let currentDate = new Date(startDate);
				let daysCount = 0;

				while (getISODateString(currentDate) <= endStr) {
					const dateStr = getISODateString(currentDate);
					const dailyLog = JSON.parse(
						localStorage.getItem(`dailyLog_${dateStr}`) || "{}"
					);

					aggregatedData.steps += dailyLog.steps || 0;
					aggregatedData.exercise += dailyLog.exercise || 0;
					aggregatedData.kcal += dailyLog.kcal || 0;
					aggregatedData.water += dailyLog.water || 0;

					daysCount++;
					currentDate.setDate(currentDate.getDate() + 1);
				}
				aggregatedData.daysInRange = daysCount > 0 ? daysCount : 1;

				aggregatedData.totalActiveGoals = userGoals.filter(
					(g) => g.status !== "completed"
				).length;
				aggregatedData.goalsMetCount =
					calculateGoalsMet(aggregatedData);

				updateGoalsUI();
				updateStatsUI();
				loadGoalsChecklist();
			}

			function updateGoalsUI() {
				const stepsGoal =
					userGoals.find((g) => g.type === "steps")?.targetValue ||
					10000;
				const exerciseGoal =
					userGoals.find((g) => g.type === "exercise_duration")
						?.targetValue || 60;
				const kcalGoal =
					userGoals.find((g) => g.type === "calories")?.targetValue ||
					2000;
				const waterGoal =
					userGoals.find((g) => g.type === "water")?.targetValue ||
					2000;

				document.getElementById("goalSteps").textContent =
					parseInt(stepsGoal).toLocaleString();
				document.getElementById("goalExercise").textContent =
					parseInt(exerciseGoal);
				document.getElementById("goalKcal").textContent =
					parseInt(kcalGoal).toLocaleString();
				document.getElementById("goalWater").textContent = (
					parseInt(waterGoal) / 1000
				).toFixed(1);
			}

			function updateStatsUI() {
				let displaySteps, displayExercise, displayKcal, displayWater;
				let stepsLabel,
					exerciseLabel,
					kcalLabel,
					waterLabel,
					goalsLabel;

				if (currentFilter === "daily") {
					displaySteps = aggregatedData.steps;
					displayExercise = aggregatedData.exercise;
					displayKcal = aggregatedData.kcal;
					displayWater = aggregatedData.water;

					stepsLabel = `Goal: <span id="goalSteps">${
						document.getElementById("goalSteps").textContent
					}</span> steps`;
					exerciseLabel = `Goal: <span id="goalExercise">${
						document.getElementById("goalExercise").textContent
					}</span> min active`;
					kcalLabel = `Goal: <span id="goalKcal">${
						document.getElementById("goalKcal").textContent
					}</span> kcal`;
					waterLabel = `Goal: <span id="goalWater">${
						document.getElementById("goalWater").textContent
					}</span> L`;
					goalsLabel = "Active Goals Met Today";
				} else {
					const avgDivisor = aggregatedData.daysInRange;
					displaySteps = Math.round(
						aggregatedData.steps / avgDivisor
					);
					displayExercise = Math.round(
						aggregatedData.exercise / avgDivisor
					);
					displayKcal = Math.round(aggregatedData.kcal / avgDivisor);
					displayWater = aggregatedData.water / avgDivisor;

					const periodLabel =
						currentFilter === "weekly" ? "Week Avg" : "Month Avg";
					stepsLabel = `Goal: <span id="goalSteps">${
						document.getElementById("goalSteps").textContent
					}</span> steps (${periodLabel})`;
					exerciseLabel = `Goal: <span id="goalExercise">${
						document.getElementById("goalExercise").textContent
					}</span> min (${periodLabel})`;
					kcalLabel = `Goal: <span id="goalKcal">${
						document.getElementById("goalKcal").textContent
					}</span> kcal (${periodLabel})`;
					waterLabel = `Goal: <span id="goalWater">${
						document.getElementById("goalWater").textContent
					}</span> L (${periodLabel})`;
					goalsLabel = `Avg Goals Met / Day (${
						currentFilter === "weekly" ? "Week" : "Month"
					})`;
				}

				document.getElementById("statSteps").textContent =
					displaySteps.toLocaleString();
				document.getElementById("statExercise").textContent =
					displayExercise;
				document.getElementById("statKcal").textContent =
					displayKcal.toLocaleString();
				document.getElementById("statWater").textContent = (
					displayWater / 1000
				).toFixed(1);

				document.getElementById("statStepsLabel").innerHTML =
					stepsLabel;
				document.getElementById("statExerciseLabel").innerHTML =
					exerciseLabel;
				document.getElementById("statKcalLabel").innerHTML = kcalLabel;
				document.getElementById("statWaterLabel").innerHTML =
					waterLabel;
				document.getElementById("statGoalsLabel").textContent =
					goalsLabel;

				const stepsGoalVal =
					parseInt(
						document
							.getElementById("goalSteps")
							.textContent.replace(/,/g, "")
					) || 1;
				const exerciseGoalVal =
					parseInt(
						document.getElementById("goalExercise").textContent
					) || 1;
				const kcalGoalVal =
					parseInt(
						document
							.getElementById("goalKcal")
							.textContent.replace(/,/g, "")
					) || 1;
				const waterGoalVal =
					parseFloat(
						document.getElementById("goalWater").textContent
					) * 1000 || 1;

				const avgSteps = Math.round(
					aggregatedData.steps / aggregatedData.daysInRange
				);
				const avgExercise = Math.round(
					aggregatedData.exercise / aggregatedData.daysInRange
				);
				const avgKcal = Math.round(
					aggregatedData.kcal / aggregatedData.daysInRange
				);
				const avgWater = Math.round(
					aggregatedData.water / aggregatedData.daysInRange
				);

				updateProgressBar("stepsProgress", avgSteps, stepsGoalVal);
				updateProgressBar(
					"exerciseProgress",
					avgExercise,
					exerciseGoalVal
				);
				updateProgressBar("kcalProgress", avgKcal, kcalGoalVal);
				updateProgressBar("waterProgress", avgWater, waterGoalVal);

				document.getElementById(
					"statGoals"
				).textContent = `${aggregatedData.goalsMetCount} / ${aggregatedData.totalActiveGoals}`;
				updateProgressBar(
					"goalsProgress",
					aggregatedData.goalsMetCount,
					aggregatedData.totalActiveGoals || 1
				);
			}

			function updateProgressBar(elementId, currentValue, goalValue) {
				const progressBar = document.getElementById(elementId);
				if (!progressBar || goalValue <= 0) {
					if (progressBar) progressBar.style.width = "0%";
					return;
				}
				const percentage = Math.min(
					100,
					Math.max(0, (currentValue / goalValue) * 100)
				);
				progressBar.style.width = `${percentage}%`;
			}

			function calculateGoalsMet(aggData) {
				let metCount = 0;
				const avgDivisor = aggData.daysInRange;

				userGoals.forEach((goal) => {
					if (goal.status === "completed") return;
					const goalValue = parseFloat(goal.targetValue);
					if (isNaN(goalValue)) return;

					switch (goal.type) {
						case "steps":
							if (aggData.steps / avgDivisor >= goalValue)
								metCount++;
							break;
						case "exercise_duration":
							if (aggData.exercise / avgDivisor >= goalValue / 7)
								metCount++;
							break;
						case "water":
							if (aggData.water / avgDivisor >= goalValue)
								metCount++;
							break;
						case "calories":
							if (aggData.kcal / avgDivisor >= goalValue)
								metCount++;
							break;
					}
				});
				return metCount;
			}

			function loadGoalsChecklist() {
				const checklist = document.getElementById("goalsChecklist");
				const noGoalsMsg = document.getElementById("noGoalsToday");
				checklist.innerHTML = "";

				const todayGoals =
					currentFilter === "daily"
						? userGoals.filter(
								(g) =>
									g.status !== "completed" &&
									(g.type === "steps" ||
										g.type === "water" ||
										g.type === "custom" ||
										g.type === "exercise_duration")
						  )
						: [];

				if (todayGoals.length === 0) {
					noGoalsMsg.classList.remove("d-none");
					noGoalsMsg.textContent =
						currentFilter === "daily"
							? "No active goals for today."
							: "Checklist only available in 'Today' view.";
					return;
				}

				noGoalsMsg.classList.add("d-none");
				todayGoals.forEach((goal) => {
					const item = document.createElement("li");
					item.classList.add("goals-checklist-item");
					const isCompleted = checkGoalCompletionStatus(goal.id);
					if (isCompleted) item.classList.add("completed");

					let goalDetailText = "";
					if (goal.targetValue) {
						let unit = "";
						if (goal.type === "steps") unit = "steps";
						else if (goal.type === "water") unit = "mL";
						else if (goal.type === "exercise_duration")
							unit = "min";
						else if (goal.type === "calories") unit = "kcal";
						else if (goal.type === "weight") unit = "kg";
						goalDetailText = `Target: ${goal.targetValue} ${unit}`;
					}

					item.innerHTML = `
                        <input type="checkbox" id="goalCheck_${
							goal.id
						}" data-goal-id="${goal.id}" ${
						isCompleted ? "checked" : ""
					} onchange="toggleGoalCompletion(this)">
                        <label for="goalCheck_${goal.id}">
                            <div class="goal-name">${goal.name}</div>
                            ${
								goalDetailText
									? `<div class="goal-details">${goalDetailText}</div>`
									: ""
							}
                        </label>
                     `;
					checklist.appendChild(item);
				});
			}

			function toggleGoalCompletion(checkbox) {
				const goalId = checkbox.dataset.goalId;
				const isCompleted = checkbox.checked;
				const listItem = checkbox.closest(".goals-checklist-item");
				listItem.classList.toggle("completed", isCompleted);

				const todayStr = getISODateString(new Date());
				let completedGoals = JSON.parse(
					localStorage.getItem(`completedGoals_${todayStr}`) || "{}"
				);
				if (isCompleted) {
					completedGoals[goalId] = true;
				} else {
					delete completedGoals[goalId];
				}
				localStorage.setItem(
					`completedGoals_${todayStr}`,
					JSON.stringify(completedGoals)
				);
			}

			function checkGoalCompletionStatus(goalId) {
				const todayStr = getISODateString(new Date());
				let completedGoals = JSON.parse(
					localStorage.getItem(`completedGoals_${todayStr}`) || "{}"
				);
				return completedGoals[goalId] === true;
			}

			const timeFiltersContainer = document.getElementById("timeFilters");
			if (timeFiltersContainer) {
				timeFiltersContainer.addEventListener("click", (event) => {
					if (event.target.classList.contains("filter-btn")) {
						const filterButtons =
							timeFiltersContainer.querySelectorAll(
								".filter-btn"
							);
						filterButtons.forEach((btn) =>
							btn.classList.remove("active")
						);
						event.target.classList.add("active");
						const newFilter = event.target.dataset.filter;
						loadDashboardData(newFilter);
					}
				});
			}

			function navigateTo(url) {
				console.log("Navigating to:", url);
				if (url && url !== "#") {
					window.location.href = url;
				} else {
					console.warn(
						`Navigation to ${url} not implemented or invalid.`
					);
				}
			}
			function showNotifications() {
				const mockNotifications = [
					"Reminder: Log your lunch!",
					"Goal Achieved: 10,000 steps yesterday!",
					"New article available: Benefits of Hydration",
				];
				alert("Notifications:\n\n- " + mockNotifications.join("\n- "));
			}

			document.addEventListener("DOMContentLoaded", () => {
				function createMockDailyLog(
					dateStr,
					steps,
					exercise,
					kcal,
					water
				) {
					if (!localStorage.getItem(`dailyLog_${dateStr}`)) {
						const log = { steps, exercise, kcal, water };
						localStorage.setItem(
							`dailyLog_${dateStr}`,
							JSON.stringify(log)
						);
					}
				}
				const today = new Date();
				for (let i = 0; i < 35; i++) {
					let pastDate = new Date(today);
					pastDate.setDate(today.getDate() - i);
					let dateStr = getISODateString(pastDate);
					createMockDailyLog(
						dateStr,
						Math.floor(Math.random() * 8000 + 4000),
						Math.floor(Math.random() * 75),
						Math.floor(Math.random() * 1000 + 1500),
						Math.floor(Math.random() * 1500 + 1000)
					);
				}

				loadDashboardData(currentFilter);
			});
		</script>
	</body>
</html>

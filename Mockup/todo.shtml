<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>Health Dashboard - iPad View</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="shared-styles.css" />
		<style>
			/* Page-specific styles */
			.greeting {
				font-size: 28px;
				font-weight: 700;
				color: var(--text-primary);
				margin: 15px 0 25px 0;
			}
			.time-filters {
				display: flex;
				gap: 12px;
				margin-bottom: 30px;
			}
			.filter-btn {
				padding: 9px 20px;
				border: none;
				border-radius: 25px;
				font-size: 14px;
				font-weight: 600;
				color: var(--text-link);
				background-color: var(--surface-color);
				cursor: pointer;
				transition: all 0.2s ease;
				box-shadow: 0 2px 5px var(--shadow-color);
			}
			.filter-btn:hover {
				background-color: var(--surface-secondary-color);
				transform: translateY(-1px);
			}
			.filter-btn.active {
				background-color: var(--primary-color);
				color: var(--text-on-primary);
				box-shadow: 0 3px 8px rgba(0, 122, 255, 0.3);
				transform: translateY(0);
			}
			@media (prefers-color-scheme: dark) {
				.filter-btn {
					background-color: var(--surface-secondary-color);
					color: var(--text-link);
					box-shadow: none;
				}
				.filter-btn:hover {
					background-color: var(--border-color);
				}
				.filter-btn.active {
					background-color: var(--primary-color);
					color: var(--text-on-primary);
				}
			}

			/* Sleep Card */
			.sleep-card .card-header-icon {
				color: var(--accent-purple);
			}
			.sleep-card .card-body {
				justify-content: space-between;
				align-items: center;
				gap: 25px;
				display: flex;
			}
			.sleep-chart-container {
				width: 110px;
				height: 110px;
				position: relative;
				flex-shrink: 0;
			}
			.sleep-chart {
				width: 100%;
				height: 100%;
				border-radius: 50%;
				background: conic-gradient(
					var(--accent-purple) 0% 80%,
					var(--chart-track-color) 80% 100%
				); /* Updated by JS */
				mask-image: radial-gradient(transparent 65%, black 66%);
				-webkit-mask-image: radial-gradient(transparent 65%, black 66%);
			}
			.sleep-chart-text {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				text-align: center;
				font-weight: 600;
			}
			.sleep-chart-percentage {
				font-size: 20px;
				color: var(--text-primary);
				line-height: 1.1;
			}
			.sleep-chart-label {
				font-size: 11px;
				color: var(--text-secondary);
			}
			.sleep-details {
				text-align: right;
			}
			.sleep-duration {
				font-size: 26px;
				font-weight: 600;
				color: var(--text-primary);
				margin-bottom: 5px;
			}
			.sleep-duration-label {
				font-size: 13px;
				color: var(--text-secondary);
				font-weight: 500;
			}

			/* Stats Grid */
			.stats-grid {
				display: grid;
				grid-template-columns: repeat(3, 1fr);
				gap: 18px;
			}
			.stat-card {
				padding: 18px;
				margin-bottom: 0;
				display: flex;
				flex-direction: column;
				align-items: flex-start;
				min-height: 150px;
				/* Inherits .card styles, add .clickable class */
			}
			.stat-card .card-header {
				margin-bottom: 12px;
				border-bottom: none;
				padding-bottom: 0;
			}
			.stat-card.clickable::after {
				content: "‚ùØ";
			} /* Keep chevron */
			.stat-card .card-body {
				flex-grow: 1;
				width: 100%;
				display: flex;
				flex-direction: column;
				justify-content: flex-start;
				align-items: flex-start;
				padding-top: 0px;
				margin-top: auto;
			}
			.stat-value {
				font-size: 24px;
				font-weight: 600;
				color: var(--text-primary);
				line-height: 1.2;
			}
			.stat-unit,
			.stat-label {
				font-size: 12px;
				color: var(--text-secondary);
				font-weight: 500;
				line-height: 1.4;
			}
			.stat-unit {
				margin-left: 3px;
			}
			.stat-label {
				margin-top: 4px;
			}
			.stat-progress-bar {
				width: 100%;
				height: 8px;
				background-color: var(--chart-track-color);
				border-radius: 4px;
				overflow: hidden;
				margin-top: 12px;
			}
			.stat-progress-bar-fill {
				height: 100%;
				background-color: var(--primary-color);
				border-radius: 4px;
				width: 0%;
				transition: width 0.5s ease;
			}

			/* Specific Stat Card Styling */
			.steps-card .card-header-icon,
			.water-card .card-header-icon {
				color: var(--accent-teal);
			}
			.steps-card .stat-progress-bar-fill,
			.water-card .stat-progress-bar-fill {
				background-color: var(--accent-teal);
			}
			.exercise-card .card-header-icon {
				color: var(--primary-color);
			}
			.exercise-card .stat-progress-bar-fill {
				background-color: var(--primary-color);
			}
			.kcal-card .card-header-icon {
				color: var(--accent-orange);
			}
			.kcal-card .stat-progress-bar-fill {
				background-color: var(--accent-orange);
			}
			.mind-card .card-header-icon {
				color: var(--accent-purple);
			}
			.mind-card .stat-progress-bar-fill {
				background-color: var(--accent-purple);
			}
			.goals-card .card-header-icon {
				color: var(--accent-green);
			}
			.goals-card .stat-progress-bar-fill {
				background-color: var(--accent-green);
			}

			/* Quick Log Section */
			.quick-log-section {
				margin-top: 30px;
			}
			.quick-log-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 18px;
			}
			.quick-log-card {
				padding: 18px; /* Uses card styles */
			}
			.quick-log-card .card-header {
				margin-bottom: 15px;
			}
			.quick-log-input-group {
				display: flex;
				gap: 10px;
				align-items: center;
			}
			.quick-log-input-group input {
				flex-grow: 1;
			}
			.quick-log-input-group button {
				margin-top: 0;
				padding: 10px 15px;
				font-size: 14px;
				flex-shrink: 0;
			}

			/* Goals Checklist */
			.goals-checklist-section {
				margin-top: 30px;
			}
			.goals-checklist {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.goals-checklist-item {
				display: flex;
				align-items: center;
				padding: 12px 0;
				border-bottom: 1px solid var(--surface-secondary-color);
			}
			.goals-checklist-item:last-child {
				border-bottom: none;
			}
			.goals-checklist-item input[type="checkbox"] {
				width: 20px;
				height: 20px;
				margin-right: 15px;
				accent-color: var(--primary-color);
				cursor: pointer;
			}
			.goals-checklist-item label {
				flex-grow: 1;
				cursor: pointer;
			}
			.goals-checklist-item .goal-name {
				font-weight: 500;
			}
			.goals-checklist-item .goal-details {
				font-size: 13px;
				color: var(--text-secondary);
				margin-top: 3px;
			}
			.goals-checklist-item.completed label {
				text-decoration: line-through;
				color: var(--text-tertiary);
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<!-- Header -->
			<div class="header">
				<div class="header-logo">Wellness Hub</div>
				<div class="header-actions">
					<button
						class="action-icon notification-icon"
						title="Notifications"
						onclick="showNotifications()"
					>
						üîî<span class="visually-hidden">Notifications</span>
					</button>
					<button
						class="action-icon search-icon"
						title="Search"
						onclick="showSearch()"
					>
						üîç<span class="visually-hidden">Search</span>
					</button>
				</div>
			</div>

			<!-- Main Scrollable Content Area -->
			<div class="main-content">
				<!-- Greeting -->
				<h1 class="greeting" id="userGreeting">Hello,</h1>

				<!-- Time Filters -->
				<div class="time-filters" id="timeFilters">
					<button class="filter-btn active" data-filter="daily">
						Today
					</button>
					<button class="filter-btn" data-filter="weekly">
						This Week
					</button>
					<button class="filter-btn" data-filter="monthly">
						This Month
					</button>
				</div>

				<!-- Sleep Analysis Card -->
				<div
					class="card sleep-card clickable"
					onclick="navigateTo('progress.shtml#sleep')"
				>
					<div class="card-header">
						<div class="card-header-title">
							<span class="card-header-icon">üåô</span> Sleep
							Analysis
						</div>
					</div>
					<div class="card-body">
						<div class="sleep-chart-container">
							<div class="sleep-chart" id="sleepChart"></div>
							<div class="sleep-chart-text">
								<div
									class="sleep-chart-percentage"
									id="sleepQuality"
								>
									--%
								</div>
								<div class="sleep-chart-label">Quality</div>
							</div>
						</div>
						<div class="sleep-details">
							<div class="sleep-duration" id="sleepDuration">
								--h --m
							</div>
							<div class="sleep-duration-label">
								Last Night's Sleep
							</div>
						</div>
					</div>
				</div>

				<!-- Stats Grid -->
				<div class="stats-grid">
					<div
						class="card stat-card steps-card clickable"
						onclick="navigateTo('progress.shtml#activity')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon">üë£</span> Steps
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value" id="statSteps">0</div>
							<div class="stat-label">
								Goal: <span id="goalSteps">10,000</span> steps
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="stepsProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card exercise-card clickable"
						onclick="navigateTo('progress.shtml#activity')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon">üèÉ</span>
								Exercise
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statExercise">0</span
								><span class="stat-unit">min</span>
							</div>
							<div class="stat-label">
								Goal: <span id="goalExercise">60</span> min
								active
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="exerciseProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card kcal-card clickable"
						onclick="navigateTo('progress.shtml#nutrition')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon">üî•</span> Kcal
								Consumed
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statKcal">0</span
								><span class="stat-unit">kcal</span>
							</div>
							<div class="stat-label">
								Goal: <span id="goalKcal">2000</span> kcal
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="kcalProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card water-card clickable"
						onclick="navigateTo('progress.shtml#water')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon">üíß</span> Water
								Intake
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statWater">0</span
								><span class="stat-unit">L</span>
							</div>
							<div class="stat-label">
								Goal: <span id="goalWater">2.0</span> L
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="waterProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card mind-card clickable"
						onclick="navigateTo('progress.shtml#mindfulness')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon">üßò</span>
								Mindfulness
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value">
								<span id="statMind">0</span
								><span class="stat-unit">min</span>
							</div>
							<div class="stat-label">
								Goal: <span id="goalMind">15</span> min today
							</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="mindProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
					<div
						class="card stat-card goals-card clickable"
						onclick="navigateTo('profile.shtml#goals')"
					>
						<div class="card-header">
							<div class="card-header-title">
								<span class="card-header-icon">üéØ</span> Goals
							</div>
						</div>
						<div class="card-body">
							<div class="stat-value" id="statGoals">0 / 0</div>
							<div class="stat-label">Active Goals Met Today</div>
							<div class="stat-progress-bar">
								<div
									class="stat-progress-bar-fill"
									id="goalsProgress"
									style="width: 0%"
								></div>
							</div>
						</div>
					</div>
				</div>
				<!-- End Stats Grid -->

				<!-- Quick Log Section -->
				<section class="quick-log-section">
					<h2
						class="section-header"
						style="
							border: none;
							margin-bottom: 15px;
							font-size: 18px;
						"
					>
						Quick Log
					</h2>
					<div class="quick-log-grid">
						<!-- Quick Log Steps -->
						<div class="card quick-log-card">
							<div
								class="card-header"
								style="border: none; padding-bottom: 0"
							>
								<div class="card-header-title">
									<span
										class="card-header-icon"
										style="color: var(--accent-teal)"
										>üë£</span
									>
									Log Steps
								</div>
							</div>
							<div class="card-body">
								<div class="quick-log-input-group">
									<input
										type="number"
										id="quickLogSteps"
										name="quick_steps"
										class="form-input"
										placeholder="Enter steps"
										min="0"
									/>
									<button
										class="button button-secondary"
										onclick="quickLogSteps()"
									>
										Log
									</button>
								</div>
							</div>
						</div>
						<!-- Quick Log Water -->
						<div class="card quick-log-card">
							<div
								class="card-header"
								style="border: none; padding-bottom: 0"
							>
								<div class="card-header-title">
									<span
										class="card-header-icon"
										style="color: var(--accent-teal)"
										>üíß</span
									>
									Log Water
								</div>
							</div>
							<div class="card-body">
								<div class="quick-log-input-group">
									<input
										type="number"
										id="quickLogWater"
										name="quick_water"
										class="form-input"
										placeholder="Amount (mL)"
										min="0"
										step="50"
									/>
									<button
										class="button button-secondary"
										onclick="quickLogWater()"
									>
										Log
									</button>
								</div>
							</div>
						</div>
						<!-- Quick Log Weight (Optional) -->
						<div class="card quick-log-card">
							<div
								class="card-header"
								style="border: none; padding-bottom: 0"
							>
								<div class="card-header-title">
									<span
										class="card-header-icon"
										style="color: var(--accent-red)"
										>‚öñÔ∏è</span
									>
									Log Weight
								</div>
							</div>
							<div class="card-body">
								<div class="quick-log-input-group">
									<input
										type="number"
										id="quickLogWeight"
										name="quick_weight"
										class="form-input"
										placeholder="Weight (kg)"
										min="0"
										step="0.1"
									/>
									<button
										class="button button-secondary"
										onclick="quickLogWeight()"
									>
										Log
									</button>
								</div>
							</div>
						</div>
					</div>
				</section>

				<!-- Today's Goals Checklist -->
				<section class="goals-checklist-section card">
					<!-- Wrap in a card -->
					<h2
						class="section-header"
						style="
							border: none;
							margin-bottom: 15px;
							font-size: 18px;
						"
					>
						üéØ Today's Goals Checklist
					</h2>
					<ul class="goals-checklist" id="goalsChecklist">
						<!-- Goals loaded by JS -->
					</ul>
					<p
						id="noGoalsToday"
						class="text-center text-tertiary d-none mt-2"
					>
						No active goals for today.
					</p>
				</section>
			</div>
			<!-- End Main Content -->

			<!-- Bottom Navigation Bar -->
			<nav class="bottom-nav" id="bottomNav">
				<button
					onclick="window.location.href='todo.shtml'"
					class="nav-item active"
					data-page="home"
				>
					<span class="nav-icon">üè†</span>
					<span class="nav-label">Home</span>
				</button>
				<button
					onclick="window.location.href='progress.shtml'"
					class="nav-item"
					data-page="progress"
				>
					<span class="nav-icon">üìä</span>
					<span class="nav-label">Progress</span>
				</button>
				<button
					onclick="window.location.href='log-meal.shtml'"
					class="nav-item"
					data-page="log-meal"
				>
					<span class="nav-icon">üçî</span>
					<span class="nav-label">Log Meal</span>
				</button>
				<button
					onclick="window.location.href='log-exercise.shtml'"
					class="nav-item"
					data-page="log-exercise"
				>
					<span class="nav-icon">üèÉ</span>
					<span class="nav-label">Log Exercise</span>
				</button>
				<button
					onclick="window.location.href='profile.shtml'"
					class="nav-item"
					data-page="profile"
				>
					<span class="nav-icon">üë§</span>
					<span class="nav-label">Profile</span>
				</button>
			</nav>
		</div>
		<!-- End ipad Container -->

		<script>
			let currentFilter = "daily"; // Track active filter
			let userGoals = [];
			let dailyLog = {}; // Store today's logs { steps: 1000, water: 500, kcal: 1200, exercise: 30, mind: 10 }

			// --- Data Loading & Calculation ---
			function loadDashboardData() {
				// 1. Load User Profile & Goals
				const userProfile = JSON.parse(
					localStorage.getItem("userProfile") || "{}"
				);
				userGoals = JSON.parse(
					localStorage.getItem("userGoals") || "[]"
				);
				document.getElementById("userGreeting").textContent = `Hello, ${
					userProfile.username || "User"
				}!`;

				// Set goals in stat cards
				document.getElementById("goalSteps").textContent =
					userGoals.find((g) => g.type === "steps")?.targetValue ||
					"10,000";
				document.getElementById("goalExercise").textContent =
					userGoals.find((g) => g.type === "exercise_duration")
						?.targetValue || "60"; // Assuming weekly goal, display daily portion?
				document.getElementById("goalKcal").textContent =
					userGoals.find((g) => g.type === "calories")?.targetValue ||
					"2000";
				document.getElementById("goalWater").textContent =
					(userGoals.find((g) => g.type === "water")?.targetValue ||
						"2000") / 1000; // Assuming goal in mL, display in L
				document.getElementById("goalMind").textContent =
					userGoals.find((g) => g.type === "mindfulness")
						?.targetValue || "15";

				// 2. Load or calculate data based on filter (currentFilter)
				// This part needs more robust logic to fetch/aggregate data for week/month
				// For this demo, we'll primarily use a simplified 'dailyLog' from localStorage

				const todayStr = new Date().toISOString().split("T")[0];
				dailyLog = JSON.parse(
					localStorage.getItem(`dailyLog_${todayStr}`) || "{}"
				);

				// 3. Update UI elements
				updateStatsUI();
				updateSleepUI(); // Needs sleep data source
				loadGoalsChecklist();
			}

			function updateStatsUI() {
				// Update stat values
				document.getElementById("statSteps").textContent =
					dailyLog.steps || 0;
				document.getElementById("statExercise").textContent =
					dailyLog.exercise || 0;
				document.getElementById("statKcal").textContent =
					dailyLog.kcal || 0;
				document.getElementById("statWater").textContent = (
					(dailyLog.water || 0) / 1000
				).toFixed(1); // Display in L
				document.getElementById("statMind").textContent =
					dailyLog.mind || 0;

				// Update progress bars
				updateProgressBar(
					"stepsProgress",
					dailyLog.steps || 0,
					parseInt(document.getElementById("goalSteps").textContent)
				);
				updateProgressBar(
					"exerciseProgress",
					dailyLog.exercise || 0,
					parseInt(
						document.getElementById("goalExercise").textContent
					)
				);
				updateProgressBar(
					"kcalProgress",
					dailyLog.kcal || 0,
					parseInt(document.getElementById("goalKcal").textContent)
				);
				updateProgressBar(
					"waterProgress",
					dailyLog.water || 0,
					parseFloat(
						document.getElementById("goalWater").textContent
					) * 1000
				); // Compare in mL
				updateProgressBar(
					"mindProgress",
					dailyLog.mind || 0,
					parseInt(document.getElementById("goalMind").textContent)
				);

				// Update goals met count (simplified)
				const goalsMet = calculateGoalsMet();
				const totalActiveGoals = userGoals.filter(
					(g) => g.status !== "completed"
				).length; // Count active goals
				document.getElementById(
					"statGoals"
				).textContent = `${goalsMet} / ${totalActiveGoals}`;
				updateProgressBar("goalsProgress", goalsMet, totalActiveGoals);
			}

			function updateProgressBar(elementId, currentValue, goalValue) {
				const progressBar = document.getElementById(elementId);
				if (!progressBar || goalValue <= 0) return;
				const percentage = Math.min(
					100,
					Math.max(0, (currentValue / goalValue) * 100)
				);
				progressBar.style.width = `${percentage}%`;
			}

			function updateSleepUI() {
				// TODO: Needs data source for sleep (e.g., from manual log or device)
				const quality = 80; // Mock
				const durationHours = 7; // Mock
				const durationMinutes = 30; // Mock

				document.getElementById(
					"sleepQuality"
				).textContent = `${quality}%`;
				document.getElementById(
					"sleepDuration"
				).textContent = `${durationHours}h ${durationMinutes}m`;
				const sleepChart = document.getElementById("sleepChart");
				if (sleepChart) {
					sleepChart.style.background = `conic-gradient(var(--accent-purple) 0% ${quality}%, var(--chart-track-color) ${quality}% 100%)`;
				}
			}

			function calculateGoalsMet() {
				// Simple check based on daily log vs goals
				let metCount = 0;
				userGoals.forEach((goal) => {
					if (goal.status === "completed") return; // Skip completed
					const goalValue = parseFloat(goal.targetValue);
					if (isNaN(goalValue)) return; // Skip goals without numeric targets for now

					switch (goal.type) {
						case "steps":
							if ((dailyLog.steps || 0) >= goalValue) metCount++;
							break;
						// case 'exercise_duration': // Needs weekly calculation
						// case 'weight': // Not a daily check
						case "water":
							if ((dailyLog.water || 0) >= goalValue) metCount++;
							break; // Assuming goalValue is in mL
						// case 'frequency': // Needs more complex tracking
						// case 'mindfulness': if ((dailyLog.mind || 0) >= goalValue) metCount++; break; // Assuming goal name matches dailyLog key
					}
				});
				return metCount;
			}

			function loadGoalsChecklist() {
				const checklist = document.getElementById("goalsChecklist");
				const noGoalsMsg = document.getElementById("noGoalsToday");
				checklist.innerHTML = ""; // Clear existing

				// Filter for goals relevant for today (e.g., daily types, or active goals)
				const todayGoals = userGoals.filter(
					(g) =>
						g.status !== "completed" &&
						(g.type === "steps" ||
							g.type === "water" ||
							g.type === "mindfulness" ||
							g.type === "custom") // Add types relevant for daily checkoff
				);

				if (todayGoals.length === 0) {
					noGoalsMsg.classList.remove("d-none");
					return;
				}

				noGoalsMsg.classList.add("d-none");
				todayGoals.forEach((goal) => {
					const item = document.createElement("li");
					item.classList.add("goals-checklist-item");
					const isCompleted = checkGoalCompletionStatus(goal.id); // Check if manually marked complete today
					if (isCompleted) item.classList.add("completed");

					item.innerHTML = `
                        <input type="checkbox" id="goalCheck_${
							goal.id
						}" data-goal-id="${goal.id}" ${
						isCompleted ? "checked" : ""
					} onchange="toggleGoalCompletion(this)">
                        <label for="goalCheck_${goal.id}">
                            <div class="goal-name">${goal.name}</div>
                            ${
								goal.targetValue
									? `<div class="goal-details">Target: ${goal.targetValue}</div>`
									: ""
							}
                        </label>
                     `;
					checklist.appendChild(item);
				});
			}

			// --- Quick Log Functions ---
			function quickLogSteps() {
				const input = document.getElementById("quickLogSteps");
				const steps = parseInt(input.value);
				if (!isNaN(steps) && steps >= 0) {
					dailyLog.steps = (dailyLog.steps || 0) + steps; // Add to existing steps
					saveDailyLog();
					updateStatsUI();
					input.value = ""; // Clear input
					alert(`${steps} steps logged!`);
				} else {
					alert("Please enter a valid number of steps.");
				}
			}
			function quickLogWater() {
				const input = document.getElementById("quickLogWater");
				const water = parseInt(input.value);
				if (!isNaN(water) && water > 0) {
					dailyLog.water = (dailyLog.water || 0) + water; // Add water in mL
					saveDailyLog();
					updateStatsUI();
					input.value = "";
					alert(`${water} mL water logged!`);
				} else {
					alert("Please enter a valid amount of water in mL.");
				}
			}
			function quickLogWeight() {
				const input = document.getElementById("quickLogWeight");
				const weight = parseFloat(input.value);
				if (!isNaN(weight) && weight > 0) {
					const today = new Date().toISOString().split("T")[0];
					logWeightValue(today, weight); // Use profile function to update log
					// Update profile display if needed
					const userProfile = JSON.parse(
						localStorage.getItem("userProfile") || "{}"
					);
					userProfile.weight_kg = weight;
					localStorage.setItem(
						"userProfile",
						JSON.stringify(userProfile)
					);
					loadDashboardData(); // Reload to reflect weight change in profile stats potentially
					input.value = "";
					alert(`Weight ${weight} kg logged for today!`);
				} else {
					alert("Please enter a valid weight in kg.");
				}
			}

			function saveDailyLog() {
				const todayStr = new Date().toISOString().split("T")[0];
				localStorage.setItem(
					`dailyLog_${todayStr}`,
					JSON.stringify(dailyLog)
				);
			}

			// --- Goal Checklist Functions ---
			function toggleGoalCompletion(checkbox) {
				const goalId = checkbox.dataset.goalId;
				const isCompleted = checkbox.checked;
				const listItem = checkbox.closest(".goals-checklist-item");
				listItem.classList.toggle("completed", isCompleted);

				// Store completion status (e.g., in dailyLog or separate storage)
				const todayStr = new Date().toISOString().split("T")[0];
				let completedGoals = JSON.parse(
					localStorage.getItem(`completedGoals_${todayStr}`) || "{}"
				);
				if (isCompleted) {
					completedGoals[goalId] = true;
				} else {
					delete completedGoals[goalId];
				}
				localStorage.setItem(
					`completedGoals_${todayStr}`,
					JSON.stringify(completedGoals)
				);

				// Optionally update overall goals met stat immediately
				// updateStatsUI(); // Recalculate if needed
			}

			function checkGoalCompletionStatus(goalId) {
				const todayStr = new Date().toISOString().split("T")[0];
				let completedGoals = JSON.parse(
					localStorage.getItem(`completedGoals_${todayStr}`) || "{}"
				);
				return completedGoals[goalId] === true;
			}

			// --- Time Filter Button Handler ---
			const timeFiltersContainer = document.getElementById("timeFilters");
			if (timeFiltersContainer) {
				timeFiltersContainer.addEventListener("click", (event) => {
					if (event.target.classList.contains("filter-btn")) {
						const filterButtons =
							timeFiltersContainer.querySelectorAll(
								".filter-btn"
							);
						filterButtons.forEach((btn) =>
							btn.classList.remove("active")
						);
						event.target.classList.add("active");
						currentFilter = event.target.dataset.filter;
						console.log("Selected Filter:", currentFilter);
						alert(
							`Data view changed to ${currentFilter}. (Full data aggregation not implemented in demo)`
						);
						// TODO: Add logic to fetch and update card data based on filter
						// loadDashboardData(); // Reload data for the new filter
					}
				});
			}

			// --- Mock Navigation & Actions ---
			function navigateTo(url) {
				console.log("Navigating to:", url);
				if (url && url !== "#") {
					window.location.href = url;
				} else {
					alert(`Navigation to ${url} section not implemented.`);
				}
			}
			function showNotifications() {
				alert("Notifications panel not implemented.");
			}
			function showSearch() {
				alert("Search function not implemented.");
			}

			// --- Initial Setup ---
			document.addEventListener("DOMContentLoaded", () => {
				loadDashboardData();
			});
		</script>
	</body>
</html>

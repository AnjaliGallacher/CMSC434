<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<title>Log Exercise - iPad View</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="shared-styles.css" />
		<style>
			/* Page-specific styles */
			.form-label-icon {
				display: inline-block; /* Keep icons visible */
				color: var(--text-secondary); /* Use theme color */
			}
		</style>
	</head>
	<body>
		<div class="ipad-container">
			<!-- Header -->
			<div class="header">
				<div class="header-spacer"></div>
				<span class="header-title">Log Exercise</span>
				<button class="header-action-button" onclick="saveExercise()">
					Save
				</button>
			</div>

			<!-- Main Scrollable Content Area -->
			<div class="main-content">
				<form id="log-exercise-form">
					<!-- Exercise Type -->
					<div class="input-group">
						<label for="ex-type" class="form-label">
							Exercise Type
						</label>
						<input
							type="text"
							id="ex-type"
							name="exercise_type"
							class="form-input"
							placeholder="e.g., Running, Weightlifting"
							list="exercise-suggestions"
							required
						/>
						<datalist id="exercise-suggestions">
							<option value="Running"></option>
							<option value="Walking"></option>
							<option value="Cycling"></option>
							<option value="Weightlifting"></option>
							<option value="Yoga"></option>
							<option value="Swimming"></option>
							<option value="Hiking"></option>
							<option value="Rowing"></option>
							<option value="Pilates"></option>
							<option value="Strength Training"></option>
							<option value="Elliptical"></option>
							<option value="Stair Climbing"></option>
							<option value="Dancing"></option>
							<option value="HIIT"></option>
						</datalist>
					</div>

					<!-- Date & Time Row -->
					<div class="input-group">
						<div class="input-row">
							<div>
								<label for="ex-date" class="form-label">
									Date
								</label>
								<input
									type="date"
									id="ex-date"
									name="exercise_date"
									class="form-input"
									required
								/>
							</div>
							<div>
								<label for="ex-time" class="form-label">
									Start Time
								</label>
								<input
									type="time"
									id="ex-time"
									name="exercise_time"
									class="form-input"
									required
								/>
							</div>
						</div>
					</div>

					<!-- Duration & Calories Row -->
					<div class="input-group">
						<div class="input-row">
							<div>
								<label for="ex-duration" class="form-label">
									Duration
								</label>
								<div class="input-with-unit">
									<input
										type="number"
										id="ex-duration"
										name="exercise_duration"
										class="form-input"
										placeholder="e.g., 45"
										min="1"
										step="1"
										required
									/>
									<span class="input-unit">min</span>
								</div>
							</div>
							<div>
								<label for="ex-calories" class="form-label">
									Calories Burned (Optional)
								</label>
								<div class="input-with-unit">
									<input
										type="number"
										id="ex-calories"
										name="exercise_calories"
										class="form-input"
										placeholder="Estimate (e.g., 350)"
										min="0"
										step="1"
									/>
									<span class="input-unit">kcal</span>
								</div>
							</div>
						</div>
					</div>

					<!-- Difficulty & Reps/Sets (Optional) -->
					<div class="input-group">
						<div class="input-row">
							<div>
								<label for="ex-difficulty" class="form-label"
									>Difficulty (Optional)</label
								>
								<select
									id="ex-difficulty"
									name="exercise_difficulty"
									class="form-select"
								>
									<option value="">Select Difficulty</option>
									<option value="easy">Easy</option>
									<option value="moderate">Moderate</option>
									<option value="hard">Hard</option>
									<option value="intense">Intense</option>
								</select>
							</div>
							<div>
								<label for="ex-reps-sets" class="form-label"
									>Reps/Sets (Optional)</label
								>
								<input
									type="text"
									id="ex-reps-sets"
									name="exercise_reps_sets"
									class="form-input"
									placeholder="e.g., 3 sets of 10 reps"
								/>
							</div>
						</div>
					</div>

					<!-- Optional Fields Separator -->
					<hr
						style="
							border: none;
							border-top: 1px dashed var(--border-color);
							margin: 30px 0;
						"
					/>

					<!-- Distance Row -->
					<div class="input-group">
						<label for="ex-distance" class="form-label">
							Distance (Optional)
						</label>
						<div class="input-with-unit">
							<input
								type="number"
								id="ex-distance"
								name="exercise_distance"
								class="form-input"
								placeholder="e.g., 5"
								min="0"
								step="0.1"
							/>
							<select
								id="distance-unit"
								name="exercise_distance_unit"
								class="input-unit"
							>
								<option value="km">km</option>
								<option value="miles">miles</option>
								<option value="meters">meters</option>
								<option value="yards">yards</option>
							</select>
						</div>
					</div>

					<!-- Notes -->
					<div class="input-group">
						<label for="ex-notes" class="form-label">
							Notes (Optional)
						</label>
						<textarea
							id="ex-notes"
							name="exercise_notes"
							class="form-textarea"
							rows="4"
							placeholder="How did your workout feel? Any achievements or challenges?"
						></textarea>
					</div>
				</form>
			</div>
			<!-- End Main Content -->

			<!-- Bottom Navigation Bar -->
			<nav class="bottom-nav" id="bottomNav">
				<button
					onclick="window.location.href='todo.shtml'"
					class="nav-item"
					data-page="home"
				>
					<span class="nav-icon">üè†</span>
					<span class="nav-label">Home</span>
				</button>
				<button
					onclick="window.location.href='progress.shtml'"
					class="nav-item"
					data-page="progress"
				>
					<span class="nav-icon">üìä</span>
					<span class="nav-label">Progress</span>
				</button>
				<button
					onclick="window.location.href='log-meal.shtml'"
					class="nav-item"
					data-page="log-meal"
				>
					<span class="nav-icon">üçî</span>
					<span class="nav-label">Log Meal</span>
				</button>
				<button
					onclick="window.location.href='log-exercise.shtml'"
					class="nav-item active"
					data-page="log-exercise"
				>
					<span class="nav-icon">üèÉ</span>
					<span class="nav-label">Log Exercise</span>
				</button>
				<button
					onclick="window.location.href='profile.shtml'"
					class="nav-item"
					data-page="profile"
				>
					<span class="nav-icon">üë§</span>
					<span class="nav-label">Profile</span>
				</button>
			</nav>
		</div>
		<!-- End ipad Container -->

		<script>
			function getISODateString(date) {
				return date.toISOString().split("T")[0];
			}

			function saveExercise() {
				// Basic validation example
				const exTypeInput = document.getElementById("ex-type");
				const exDurationInput = document.getElementById("ex-duration");
				const exDateInput = document.getElementById("ex-date");
				const exTimeInput = document.getElementById("ex-time");

				const exType = exTypeInput.value.trim();
				const exDuration = exDurationInput.value;
				const exDate = exDateInput.value;
				const exTime = exTimeInput.value;

				if (!exType || !exDuration || !exDate || !exTime) {
					alert(
						"Please fill in Exercise Type, Date, Time, and Duration."
					);
					// Highlight missing fields (optional enhancement)
					if (!exType) exTypeInput.focus();
					else if (!exDate) exDateInput.focus();
					else if (!exTime) exTimeInput.focus();
					else if (!exDuration) exDurationInput.focus();
					return;
				}
				if (parseInt(exDuration) <= 0) {
					alert("Duration must be a positive number.");
					exDurationInput.focus();
					return;
				}

				// Gather form data
				const form = document.getElementById("log-exercise-form");
				const formData = new FormData(form);
				const exerciseData = Object.fromEntries(formData.entries());
				exerciseData.id = Date.now(); // Simple unique ID
				// Convert numbers where appropriate
				exerciseData.exercise_duration =
					parseFloat(exerciseData.exercise_duration) || 0;
				exerciseData.exercise_calories =
					parseFloat(exerciseData.exercise_calories) || null; // Keep null if empty/invalid
				exerciseData.exercise_distance =
					parseFloat(exerciseData.exercise_distance) || null;

				console.log("Exercise Data:", exerciseData);

				// Simulate saving to localStorage
				try {
					let history = JSON.parse(
						localStorage.getItem("exerciseHistory") || "[]"
					);
					history.push(exerciseData);
					// Sort history by date/time after adding (optional but good practice)
					history.sort((a, b) => {
						const dateA = new Date(
							`${a.exercise_date}T${a.exercise_time}`
						);
						const dateB = new Date(
							`${b.exercise_date}T${b.exercise_time}`
						);
						return dateA - dateB;
					});
					localStorage.setItem(
						"exerciseHistory",
						JSON.stringify(history)
					);

					// Update daily log totals for the dashboard
					const dateStr = exerciseData.exercise_date; // Should be YYYY-MM-DD
					let dailyLog = JSON.parse(
						localStorage.getItem(`dailyLog_${dateStr}`) || "{}"
					);
					dailyLog.exercise =
						(dailyLog.exercise || 0) +
						exerciseData.exercise_duration;
					// Add other relevant daily summaries if needed (e.g., total calories burned from exercise)
					localStorage.setItem(
						`dailyLog_${dateStr}`,
						JSON.stringify(dailyLog)
					);

					alert("Exercise Saved!");
					// Optionally redirect or clear form
					// window.location.href = 'progress.shtml';
					form.reset();
					setDefaultDateTime(); // Reset date/time after saving/resetting
				} catch (e) {
					console.error("Error saving exercise:", e);
					alert("Error saving exercise. Check console for details.");
				}
			}

			function setDefaultDateTime() {
				const dateInput = document.getElementById("ex-date");
				const timeInput = document.getElementById("ex-time");
				const now = new Date();

				// Set default date if value is empty/reset
				if (!dateInput.value) {
					dateInput.value = getISODateString(now); // Use helper
				}

				// Set default time if value is empty/reset
				if (!timeInput.value) {
					const hh = String(now.getHours()).padStart(2, "0");
					const mm = String(now.getMinutes()).padStart(2, "0");
					timeInput.value = `${hh}:${mm}`;
				}
			}

			// Set date/time on initial load
			document.addEventListener("DOMContentLoaded", setDefaultDateTime);
		</script>
	</body>
</html>
